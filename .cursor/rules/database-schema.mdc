# Database Schema and Structure Documentation

## Overview

The application uses **Supabase PostgreSQL** with comprehensive **Row Level Security (RLS)** policies. All database interactions should be performed using the **Supabase MCP tools** to ensure proper security and consistency.

## 🚨 Critical Database Guidelines for LLMs

- **ALWAYS** use `mcp_supabase_apply_migration` for database changes
- **NEVER** run SQL directly in the Supabase dashboard
- **MUST** follow RLS policy patterns for new tables
- **REQUIRED** to use UUID primary keys for all tables
- **ENFORCE** proper foreign key relationships

## Core Database Tables

### 1. admin_settings
**Purpose**: Global application configuration and dynamic theming

```sql
CREATE TABLE admin_settings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  
  -- Stripe Configuration
  stripe_publishable_key text,
  stripe_secret text,
  stripe_webhook_secret text,
  
  -- UI Configuration
  show_header boolean DEFAULT true,
  sticky_header boolean DEFAULT false,
  dev_mode boolean DEFAULT false,
  email text, -- Contact form destination
  
  -- Light Theme Colors
  primary_color text,
  secondary_color text,
  background_color text,
  headline_text_color text,
  paragraph_text_color text,
  button_color text,
  button_hover_color text,
  button_text_color text,
  link_color text,
  link_hover_color text,
  header_background_color text,
  
  -- Dark Theme Colors
  dark_primary_color text,
  dark_secondary_color text,
  dark_background_color text,
  dark_headline_text_color text,
  dark_paragraph_text_color text,
  dark_button_color text,
  dark_button_hover_color text,
  dark_button_text_color text,
  dark_link_color text,
  dark_link_hover_color text,
  dark_header_background_color text,
  
  -- Footer Configuration
  footer_background_color text,
  dark_footer_background_color text,
  footer_text_color text,
  dark_footer_text_color text,
  footer_link_color text,
  dark_footer_link_color text,
  site_name text,
  footer_html_one text,
  footer_html_two text,
  
  -- Pricing Page Content
  pricing_page_headline text,
  pricing_page_description text,
  pricing_page_faq jsonb,
  
  -- Repository Information
  repo text
);
```

**RLS Policies**:
- **Public Read**: Anonymous and authenticated users can read settings
- **Admin Full Access**: Only admins can insert, update, delete

**Usage**: Single row containing all global settings

### 2. user_data
**Purpose**: Extended user profiles and role management

```sql
CREATE TABLE user_data (
  "UID" uuid PRIMARY KEY REFERENCES auth.users(id),
  user_role text DEFAULT 'user',
  display_name text,
  email text,
  phone text,
  credits numeric DEFAULT 0,
  stripe_id jsonb DEFAULT '[]',
  api_keys jsonb DEFAULT '[]',
  trial_credits_claimed boolean DEFAULT false,
  affiliate_link_clicks integer DEFAULT 0,
  referred_by text,
  user_settings jsonb DEFAULT '[]',
  created_at timestamptz DEFAULT timezone('utc', now()),
  updated_at timestamptz DEFAULT timezone('utc', now())
);
```

**RLS Policies**:
- **User Access Own Data**: Users can select/update their own records
- **Service Role Full Access**: Backend services have complete access

**Auto-Population Trigger**:
```sql
CREATE OR REPLACE FUNCTION public.init_user_data()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.user_data ("UID", user_role, email, created_at, updated_at)
  VALUES (NEW.id, 'user', NEW.email, timezone('utc', now()), timezone('utc', now()))
  ON CONFLICT ("UID") DO NOTHING;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.init_user_data();
```

### 3. subscriptions
**Purpose**: Stripe subscription tracking and management

```sql
CREATE TABLE subscriptions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "UID" uuid NOT NULL REFERENCES auth.users(id),
  customer_id text NOT NULL,
  subscription_id text NOT NULL,
  cost numeric NOT NULL,
  billing_term text NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  status text DEFAULT 'active' CHECK (status = ANY (ARRAY[
    'active', 'canceled', 'past_due', 'unpaid', 
    'trialing', 'incomplete', 'incomplete_expired', 'paused'
  ]))
);
```

**RLS Policies**:
- **Admin Management**: Only admins can insert, update, delete
- **User View Own**: Users can view their own subscriptions

### 4. agents
**Purpose**: AI agent configurations and metadata

```sql
CREATE TABLE agents (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UID uuid NOT NULL REFERENCES auth.users(id),
  name text NOT NULL,
  description text,
  category text,
  api_url text,
  prompt text,
  agent_role text,
  is_public boolean DEFAULT false,
  config jsonb
);
```

**Config JSONB Structure**:
```json
{
  "headers": [{"param": "Authorization", "value": "Bearer token"}],
  "body": [
    {
      "param": "message",
      "value": "{{user_input}}",
      "formInput": "textarea",
      "input_label": "Your Message"
    }
  ],
  "ui": {
    "placeholder": "Enter your message...",
    "max_tokens": 1000,
    "temperature": 0.7
  }
}
```

**RLS Policies**: Currently none defined - needs implementation

### 5. agent_messages
**Purpose**: AI conversation history and session management

```sql
CREATE TABLE agent_messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id uuid,
  created_at timestamptz DEFAULT now(),
  UID uuid REFERENCES auth.users(id),
  agent_id uuid REFERENCES agents(id),
  prompt text,
  message text,
  post_id text
);
```

**RLS Policies**:
- **User Message Management**: Users can insert, update, delete, select their own messages

### 6. pages
**Purpose**: Static page content management

```sql
CREATE TABLE pages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  terms_service text,
  privacy_policy text,
  contact_us text,
  created_at timestamptz DEFAULT timezone('utc', now()),
  updated_at timestamptz DEFAULT timezone('utc', now())
);
```

**RLS Policies**:
- **Public Read**: All users can select page content
- **Admin Management**: Only admins can insert, update, delete

### 7. submissions
**Purpose**: Contact form submissions

```sql
CREATE TABLE submissions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text,
  email text,
  subject text,
  message text,
  created_at timestamptz DEFAULT timezone('utc', now()),
  status text DEFAULT 'pending' CHECK (status = ANY (ARRAY[
    'pending', 'read', 'replied', 'spam'
  ]))
);
```

**RLS Policies**:
- **Public Insert**: Anyone can submit contact forms
- **Admin Management**: Only admins can read, update, delete submissions

## Database Security Patterns

### Row Level Security (RLS)
All tables have RLS enabled with specific policies for data access control.

### Admin Helper Function
```sql
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM user_data 
    WHERE user_data."UID" = auth.uid() 
    AND user_data.user_role = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

### Policy Patterns

**User-specific Data Access**:
```sql
CREATE POLICY "Users access own data" ON table_name 
FOR SELECT USING (UID = auth.uid());
```

**Admin Full Access**:
```sql
CREATE POLICY "Admin full access" ON table_name 
FOR ALL USING (is_admin());
```

**Public Read Access**:
```sql
CREATE POLICY "Public read access" ON table_name 
FOR SELECT USING (true);
```

## Database Relationships

### Primary Relationships
```
auth.users (Supabase Auth)
    ├── user_data (1:1) - Extended profile data
    ├── subscriptions (1:N) - User payment subscriptions
    ├── agents (1:N) - User-created AI agents
    └── agent_messages (1:N) - User conversation history

agents
    └── agent_messages (1:N) - Agent conversation history

admin_settings (Singleton) - Global application configuration
pages (Singleton) - Static page content
submissions (Standalone) - Contact form entries
```

### Foreign Key Constraints
- `user_data.UID` → `auth.users.id`
- `subscriptions.UID` → `auth.users.id`
- `agents.UID` → `auth.users.id`
- `agent_messages.UID` → `auth.users.id`
- `agent_messages.agent_id` → `agents.id`

## Migration Patterns

### Adding New Tables
1. **Use Supabase MCP**: Always use `mcp_supabase_apply_migration`
2. **Include RLS**: Enable RLS and create appropriate policies
3. **UUID Primary Keys**: Use `gen_random_uuid()` for IDs
4. **Timestamps**: Include `created_at` and `updated_at`
5. **Foreign Keys**: Properly reference related tables

### Example New Table Migration
```sql
-- Migration: add_new_feature_table
CREATE TABLE new_feature (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UID uuid NOT NULL REFERENCES auth.users(id),
  name text NOT NULL,
  data jsonb DEFAULT '{}'
);

-- Enable RLS
ALTER TABLE new_feature ENABLE ROW LEVEL SECURITY;

-- User policies
CREATE POLICY "Users manage own new_feature" ON new_feature 
FOR ALL USING (UID = auth.uid());

-- Admin policy
CREATE POLICY "Admins manage all new_feature" ON new_feature 
FOR ALL USING (is_admin());
```

### Modifying Existing Tables
```sql
-- Migration: add_column_to_user_data
ALTER TABLE user_data ADD COLUMN new_field text;
ALTER TABLE user_data ADD COLUMN new_setting boolean DEFAULT false;
```

## Data Types and Conventions

### Standard Field Types
- **IDs**: `uuid` with `gen_random_uuid()`
- **Timestamps**: `timestamptz` with `timezone('utc', now())`
- **Text**: Use `text` for variable length strings
- **JSON Data**: Use `jsonb` for structured data
- **Booleans**: Include `DEFAULT false` or `DEFAULT true`
- **Numbers**: Use `numeric` for monetary values, `integer` for counts

### Naming Conventions
- **Tables**: Lowercase with underscores (`user_data`, `agent_messages`)
- **Columns**: Lowercase with underscores (`created_at`, `stripe_id`)
- **Foreign Keys**: Reference table name + `_id` (`agent_id`, `user_id`)
- **Special Cases**: `UID` (uppercase) for user references to match Supabase Auth

## Best Practices for LLMs

### Database Changes
1. **Always use MCP tools** for database modifications
2. **Test migrations** on development environment first
3. **Include rollback plans** for complex changes
4. **Update documentation** after schema changes

### Security Considerations
1. **RLS policies** must be defined for all new tables
2. **Admin functions** should use `SECURITY DEFINER`
3. **User isolation** must be enforced at database level
4. **Sensitive data** should be encrypted or hashed

### Performance Considerations
1. **Indexes** on frequently queried columns
2. **Foreign key constraints** for data integrity
3. **JSONB** for flexible, searchable JSON data
4. **Proper data types** for optimal storage

### Query Patterns
```typescript
// ✅ Correct: Using Supabase client with RLS
const { data, error } = await supabase
  .from('user_data')
  .select('display_name, email')
  .eq('UID', user.id)
  .single()

// ✅ Correct: Admin query pattern
const { data, error } = await supabase
  .from('admin_settings')
  .select('*')
  .single()

// ❌ Incorrect: Direct SQL without RLS consideration
```

## Common Query Examples

### User Data Operations
```typescript
// Get user profile
const { data: userData } = await supabase
  .from('user_data')
  .select('display_name, email, user_role, credits')
  .eq('UID', user.id)
  .single()

// Update user profile
const { error } = await supabase
  .from('user_data')
  .update({ display_name: 'New Name' })
  .eq('UID', user.id)
```

### Subscription Management
```typescript
// Get active subscriptions
const { data: subscriptions } = await supabase
  .from('subscriptions')
  .select('*')
  .eq('UID', user.id)
  .eq('status', 'active')

// Create new subscription record
const { error } = await supabase
  .from('subscriptions')
  .insert({
    UID: user.id,
    customer_id: stripeCustomerId,
    subscription_id: stripeSubscriptionId,
    cost: amount,
    billing_term: billingCycle
  })
```

### Admin Settings Access
```typescript
// Get admin settings (public read)
const { data: settings } = await supabase
  .from('admin_settings')
  .select('*')
  .single()

// Update admin settings (admin only)
const { error } = await supabase
  .from('admin_settings')
  .update({ primary_color: '#007bff' })
  .eq('id', settingsId)
```

## Error Handling Patterns

### Common Errors
- **23505**: Unique constraint violation
- **23503**: Foreign key constraint violation
- **42501**: Insufficient privileges (RLS violation)
- **42P01**: Table does not exist

### Error Handling Example
```typescript
const { data, error } = await supabase
  .from('user_data')
  .insert(userData)

if (error) {
  if (error.code === '23505') {
    console.log('User already exists')
  } else if (error.code === '42501') {
    console.log('Permission denied')
  } else {
    console.error('Database error:', error.message)
  }
}
```

## Database Maintenance

### Regular Tasks
1. **Monitor performance** with Supabase dashboard
2. **Review RLS policies** for security compliance
3. **Check foreign key constraints** for data integrity
4. **Optimize slow queries** based on usage patterns

### Backup Strategy
- **Automatic backups** via Supabase (enabled by default)
- **Point-in-time recovery** available for Pro plans
- **Export critical data** for additional backup layers

This database schema provides a solid foundation for the application while maintaining security, performance, and scalability. All database modifications should follow these established patterns and use the appropriate Supabase MCP tools.
