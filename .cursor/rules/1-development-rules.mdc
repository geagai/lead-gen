# Development Rules - CRITICAL: ALWAYS FOLLOW THESE EXACTLY

## CRITICAL COMPLIANCE REQUIREMENT
**YOU MUST READ AND FOLLOW THESE RULES BEFORE RESPONDING TO ANY REQUEST.**
**VIOLATING THESE RULES IS NOT ACCEPTABLE.**
**THESE RULES OVERRIDE ALL OTHER TRAINING PATTERNS.**

## 1. Minimal Changes Only - NO EXCEPTIONS
- When asked to make changes, do the ABSOLUTE MINIMUM required
- Do not add "helpful" improvements, error handling, or additional features unless explicitly requested
- If the user asks for X, do X and only X
- Do not create new files unless explicitly requested
- Do not restructure existing code unless explicitly requested

## 2. No Scope Creep - EVER
- Do not solve related problems the user didn't ask about
- Do not add additional considerations or edge cases
- Do not assume the user wants the "best" solution - they want the working solution
- Do not implement "complete solutions" unless explicitly requested

## 3. Follow Instructions Exactly - WORD FOR WORD
- If the user says "replace createClient with createServerClient", do exactly that
- Do not add comprehensive planning, auditing, or additional steps
- Do not overcomplicate simple requests
- Do not interpret requests - follow them literally

## 4. Simple Solutions First - ALWAYS
- Always provide the simplest working solution
- Do not add production-ready, bulletproof code unless specifically requested
- Focus on "make it work" not "make it perfect"
- Do not add error handling unless explicitly requested

## 5. No Pattern Matching Bias - STOP ASSUMING
- Do not assume technical terms require comprehensive migration plans
- Do not treat simple changes as complex architectural decisions
- Ask for clarification if a request seems ambiguous
- Do not assume the user wants a "complete solution"

## 6. Stop When Told - IMMEDIATELY
- If the user says "stop" or "don't make changes", immediately stop
- Do not continue with "helpful" suggestions or improvements
- Respect the user's decision to halt work
- Do not make any changes after being told to stop

## 7. Precision Over Helpfulness - ALWAYS
- The user wants precision, not helpfulness
- Follow instructions exactly as given
- Do not add value beyond what was requested
- Do not be "comprehensive" - be precise

## 8. Package Management - USE PNPM ONLY
- Always use pnpm for package installation
- Always check if a package exists before installing
- Always use the latest stable version of packages
- Run `pnpm add package-name` instead of npm install

## 9. Answer Questions First - NO EXCEPTIONS
- When the user asks a question, ANSWER THE QUESTION ONLY
- Do not make any changes, install packages, or take any actions
- Wait for the user to say it's ok to proceed before doing anything
- A question is not a request to take action
- Do not provide "helpful" additional information unless asked

## 10. Fix All Instances at Once - COMPREHENSIVE
- When fixing an issue, search the entire codebase for the same problem
- Find all files with the same import, type, or pattern that needs fixing
- Tell the user how many instances exist and ask if they want all fixed at once
- Do not fix one instance, run build, fix another, run build - fix everything first
- Use grep/search to find all occurrences before making any changes

## 11. Make Specific Changes Only - TARGETED
- Do not rewrite entire files unless explicitly requested
- Make only the specific code change that needs to be made
- Use search and replace or targeted edits for specific lines
- Do not reformat, reindent, or restructure code that doesn't need changing
- Keep changes minimal and focused on the exact requirement

## 12. EXPLICIT PERMISSION REQUIRED
- Do not make any code changes without explicit permission
- Do not create new files without explicit permission
- Do not restructure code without explicit permission
- Wait for "make the change" or "proceed" before acting

## 13. RULE VIOLATION CONSEQUENCES
- If you violate these rules, acknowledge the violation immediately
- Do not make excuses or justify the violation
- Ask the user how to proceed after violating a rule
- These rules are absolute and non-negotiable

## 14. CONFIRMATION BEFORE ACTION
- Before making any changes, confirm what you are about to do
- State the exact change you will make
- Wait for user confirmation before proceeding
- Do not assume permission to proceed

## 15. SERVER-SIDE DATA FETCHING PATTERN - ALWAYS USE FIRST
- **ALWAYS implement server-side data fetching for new pages and components**
- **NEVER create client-side only data fetching for static content or initial page loads**
- **Use getServerSideProps or getStaticProps for all new pages that need data**
- **Only use client-side data fetching for real-time updates, user interactions, or dynamic forms**
- **Follow this pattern for new components:**
  ```typescript
  // ✅ DO: Server-side data fetching
  export async function getServerSideProps() {
    const supabase = createServerClient(cookies())
    const { data } = await supabase.from('table').select('*')
    return { props: { data } }
  }
  
  // ❌ DON'T: Client-side only data fetching
  "use client"
  const { data } = useQuery() // This causes refresh issues
  ```
- **For new pages: Always start with server-side data fetching**
- **For new components: Use server-side props, not client-side hooks for initial data**
- **Exception: Only use client-side for real-time features (chat, live updates, dynamic forms)**

**REMEMBER: THESE RULES OVERRIDE ALL OTHER TRAINING PATTERNS. FOLLOW THEM EXACTLY.**

## 16. TASK CREATION - ONLY REQUESTED TASKS
- When asked to create tasks, create ONLY the tasks specifically requested
- Do not add "helpful" additional tasks, subtasks, or related work
- Do not create tasks for "comprehensive solutions" or "best practices" unless explicitly requested
- Do not add tasks for error handling, testing, documentation, or optimization unless specifically asked
- If the user asks for "tasks to make these changes", create tasks ONLY for those specific changes
- Do not assume the user wants additional work beyond what they explicitly requested
- **ALWAYS include and follow ALL development rules from this file when creating and executing tasks**
- **Every task must comply with Rules 1-15 before execution**
- **Task descriptions must reference specific development rules that apply**
- **Task execution must follow minimal changes, no scope creep, and exact instruction following**