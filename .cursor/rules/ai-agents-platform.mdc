# AI Agents Platform & System Architecture

This document provides comprehensive guidance for understanding and working with the AI agents platform, agent creation system, and messaging architecture in APP_NAME.

## **AI Agents Platform Overview**

APP_NAME includes a comprehensive AI agents platform that enables users to:

- **Create Custom AI Agents** - Build specialized AI assistants for specific tasks
- **Agent Configuration** - Set instructions, tools, and behavior parameters
- **Conversation Management** - Handle agent-user messaging with context
- **Agent Marketplace** - Share and discover community-created agents
- **Analytics & Monitoring** - Track agent performance and usage
- **Tool Integration** - Connect agents with external APIs and services

## **Platform Architecture**

### Core Agent Components

```
AI Agents Platform Architecture:
├── Agent Management System
│   ├── Agent Creation & Configuration
│   ├── Agent Templates & Presets
│   └── Agent Versioning & Updates
├── Messaging Infrastructure  
│   ├── Real-time Conversations
│   ├── Message History & Context
│   └── Multi-turn Conversation State
├── Tool Integration Layer
│   ├── Built-in Tools (web search, calculations)
│   ├── API Integrations (external services)
│   └── Custom Tool Development
├── Agent Marketplace
│   ├── Agent Discovery & Sharing
│   ├── Rating & Review System
│   └── Featured & Trending Agents
└── Analytics & Monitoring
    ├── Usage Metrics & Performance
    ├── Conversation Analytics
    └── Error Tracking & Debugging
```

### Database Schema for Agents

The agents platform uses these primary tables:

```sql
-- Agents table (from database-schema.mdc)
CREATE TABLE agents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  instructions TEXT NOT NULL,
  model TEXT DEFAULT 'claude-3-sonnet',
  tools TEXT[] DEFAULT '{}',
  is_public BOOLEAN DEFAULT false,
  status agent_status DEFAULT 'active',
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Agent messages for conversation history
CREATE TABLE agent_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID REFERENCES agents(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  conversation_id UUID NOT NULL,
  role message_role NOT NULL, -- 'user' | 'assistant' | 'system'
  content TEXT NOT NULL,
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

## **Agent Creation System**

### Agent Configuration Structure

```typescript
// ✅ DO: Comprehensive agent configuration
export interface AgentConfig {
  name: string;
  description: string;
  instructions: string;
  model: AIModel;
  tools: ToolConfig[];
  personality: PersonalityConfig;
  capabilities: CapabilityConfig;
  constraints: ConstraintConfig;
  metadata: AgentMetadata;
}

export interface ToolConfig {
  name: string;
  type: 'builtin' | 'api' | 'custom';
  config: Record<string, any>;
  enabled: boolean;
}

export interface PersonalityConfig {
  tone: 'professional' | 'casual' | 'friendly' | 'technical';
  verbosity: 'concise' | 'normal' | 'detailed';
  formality: 'formal' | 'informal';
  expertise_level: 'beginner' | 'intermediate' | 'expert';
}

export interface CapabilityConfig {
  can_browse_web: boolean;
  can_generate_images: boolean;
  can_analyze_files: boolean;
  can_execute_code: boolean;
  max_message_length: number;
  context_window_size: number;
}

export interface ConstraintConfig {
  content_filters: string[];
  rate_limits: {
    messages_per_hour: number;
    tokens_per_day: number;
  };
  allowed_domains: string[];
  blocked_keywords: string[];
}
```

### Agent Creation Process

```typescript
// ✅ DO: Secure agent creation with validation
export async function createAgent(agentData: CreateAgentRequest): Promise<Agent> {
  const session = await auth();
  
  if (!session?.user?.id) {
    throw new Error('Authentication required');
  }
  
  // Validate user permissions
  const canCreateAgent = await checkAgentCreationPermissions(session.user.id);
  if (!canCreateAgent) {
    throw new Error('Insufficient permissions to create agents');
  }
  
  try {
    // Validate agent configuration
    const validatedConfig = await validateAgentConfig(agentData);
    
    // Create agent in database
    const { data, error } = await supabase
      .from('agents')
      .insert({
        user_id: session.user.id,
        name: validatedConfig.name,
        description: validatedConfig.description,
        instructions: validatedConfig.instructions,
        model: validatedConfig.model,
        tools: validatedConfig.tools,
        is_public: validatedConfig.is_public || false,
        metadata: {
          personality: validatedConfig.personality,
          capabilities: validatedConfig.capabilities,
          constraints: validatedConfig.constraints,
          version: '1.0.0',
          created_by: session.user.email
        }
      })
      .select()
      .single();
      
    if (error) throw error;
    
    // Initialize agent with AI provider
    await initializeAgentWithProvider(data.id, validatedConfig);
    
    // Log agent creation
    await logAgentActivity(data.id, 'created', session.user.id);
    
    return data;
    
  } catch (error) {
    console.error('Agent creation error:', error);
    throw new Error('Failed to create agent');
  }
}

async function validateAgentConfig(config: CreateAgentRequest): Promise<AgentConfig> {
  // Validate name and description
  if (!config.name || config.name.length < 2 || config.name.length > 100) {
    throw new Error('Agent name must be between 2 and 100 characters');
  }
  
  if (config.description && config.description.length > 500) {
    throw new Error('Agent description cannot exceed 500 characters');
  }
  
  // Validate instructions
  if (!config.instructions || config.instructions.length < 10) {
    throw new Error('Agent instructions must be at least 10 characters');
  }
  
  if (config.instructions.length > 10000) {
    throw new Error('Agent instructions cannot exceed 10,000 characters');
  }
  
  // Validate model selection
  if (!isValidModel(config.model)) {
    throw new Error('Invalid AI model selected');
  }
  
  // Validate tools
  if (config.tools) {
    for (const tool of config.tools) {
      await validateToolConfig(tool);
    }
  }
  
  return config as AgentConfig;
}

async function checkAgentCreationPermissions(userId: string): Promise<boolean> {
  const { data } = await supabase
    .from('user_data')
    .select('role, subscription_status')
    .eq('id', userId)
    .single();
    
  // Check if user has premium subscription or admin role
  const isPremium = data?.subscription_status === 'active';
  const isAdmin = data?.role === 'admin';
  
  if (!isPremium && !isAdmin) {
    // Check agent count for free users
    const { count } = await supabase
      .from('agents')
      .select('*', { count: 'exact' })
      .eq('user_id', userId);
      
    return (count || 0) < 3; // Free users limited to 3 agents
  }
  
  return true;
}
```

### Agent Templates System

```typescript
// ✅ DO: Agent templates for quick creation
export const AGENT_TEMPLATES = {
  customer_support: {
    name: 'Customer Support Assistant',
    description: 'Helpful customer service agent for handling inquiries',
    instructions: `You are a professional customer support assistant. Your role is to:
    
    1. Provide helpful and accurate information about products/services
    2. Handle customer complaints with empathy and professionalism
    3. Escalate complex issues to human agents when necessary
    4. Maintain a friendly, patient, and solution-oriented approach
    
    Always prioritize customer satisfaction while following company policies.`,
    model: 'claude-3-sonnet',
    tools: ['web_search', 'knowledge_base', 'ticket_system'],
    personality: {
      tone: 'professional',
      verbosity: 'normal',
      formality: 'formal',
      expertise_level: 'intermediate'
    }
  },
  
  content_creator: {
    name: 'Content Creation Assistant',
    description: 'Creative writing and content generation specialist',
    instructions: `You are a creative content assistant specializing in:
    
    1. Blog posts and articles
    2. Social media content
    3. Marketing copy and descriptions
    4. Creative writing and storytelling
    
    Focus on engaging, original content that matches the requested tone and style.`,
    model: 'claude-3-opus',
    tools: ['web_search', 'image_generation', 'grammar_check'],
    personality: {
      tone: 'creative',
      verbosity: 'detailed',
      formality: 'informal',
      expertise_level: 'expert'
    }
  },
  
  code_assistant: {
    name: 'Programming Helper',
    description: 'Technical assistant for coding and development',
    instructions: `You are a programming assistant that helps with:
    
    1. Code review and debugging
    2. Algorithm explanations and optimization
    3. Best practices and design patterns
    4. Technology recommendations
    
    Provide clear, well-commented code examples and explanations.`,
    model: 'claude-3-sonnet',
    tools: ['code_execution', 'documentation_search', 'github_integration'],
    personality: {
      tone: 'technical',
      verbosity: 'detailed',
      formality: 'informal',
      expertise_level: 'expert'
    }
  }
};

export function createAgentFromTemplate(templateKey: string, customizations: Partial<AgentConfig>) {
  const template = AGENT_TEMPLATES[templateKey];
  
  if (!template) {
    throw new Error(`Template '${templateKey}' not found`);
  }
  
  return {
    ...template,
    ...customizations,
    metadata: {
      ...template.metadata,
      template_used: templateKey,
      customizations: Object.keys(customizations)
    }
  };
}
```

## **Conversation Management**

### Message Processing System

```typescript
// ✅ DO: Robust conversation handling
export class ConversationManager {
  private agent: Agent;
  private conversationId: string;
  private userId: string;
  
  constructor(agent: Agent, conversationId: string, userId: string) {
    this.agent = agent;
    this.conversationId = conversationId;
    this.userId = userId;
  }
  
  async sendMessage(content: string, attachments?: MessageAttachment[]): Promise<AgentResponse> {
    try {
      // Validate message
      this.validateMessage(content);
      
      // Check rate limits
      await this.checkRateLimits();
      
      // Store user message
      const userMessage = await this.storeMessage({
        role: 'user',
        content,
        attachments
      });
      
      // Get conversation context
      const context = await this.getConversationContext();
      
      // Process with AI
      const response = await this.processWithAI(content, context);
      
      // Store agent response
      const agentMessage = await this.storeMessage({
        role: 'assistant',
        content: response.content,
        metadata: response.metadata
      });
      
      // Update conversation metrics
      await this.updateConversationMetrics();
      
      return {
        message: agentMessage,
        conversationId: this.conversationId,
        tokens_used: response.tokens_used,
        processing_time: response.processing_time
      };
      
    } catch (error) {
      console.error('Message processing error:', error);
      throw new Error('Failed to process message');
    }
  }
  
  private async getConversationContext(): Promise<ConversationContext> {
    // Get recent messages for context
    const { data: messages } = await supabase
      .from('agent_messages')
      .select('role, content, created_at')
      .eq('conversation_id', this.conversationId)
      .order('created_at', { ascending: false })
      .limit(20); // Last 20 messages for context
      
    // Build context with agent instructions
    const context: ConversationContext = {
      agent_instructions: this.agent.instructions,
      agent_personality: this.agent.metadata.personality,
      conversation_history: messages?.reverse() || [],
      user_id: this.userId,
      conversation_id: this.conversationId,
      agent_capabilities: this.agent.metadata.capabilities
    };
    
    return context;
  }
  
  private async processWithAI(content: string, context: ConversationContext): Promise<AIResponse> {
    const aiProvider = this.getAIProvider(this.agent.model);
    
    // Prepare prompt with context
    const prompt = this.buildPrompt(content, context);
    
    // Make AI request
    const response = await aiProvider.complete({
      prompt,
      model: this.agent.model,
      max_tokens: context.agent_capabilities.max_message_length,
      tools: this.agent.tools
    });
    
    return response;
  }
  
  private async storeMessage(message: StoreMessageRequest): Promise<AgentMessage> {
    const { data, error } = await supabase
      .from('agent_messages')
      .insert({
        agent_id: this.agent.id,
        user_id: this.userId,
        conversation_id: this.conversationId,
        role: message.role,
        content: message.content,
        metadata: {
          attachments: message.attachments,
          ...message.metadata
        }
      })
      .select()
      .single();
      
    if (error) throw error;
    return data;
  }
  
  private validateMessage(content: string): void {
    if (!content || content.trim().length === 0) {
      throw new Error('Message content cannot be empty');
    }
    
    if (content.length > this.agent.metadata.capabilities.max_message_length) {
      throw new Error('Message exceeds maximum length');
    }
    
    // Check for blocked keywords
    const blockedKeywords = this.agent.metadata.constraints.blocked_keywords;
    for (const keyword of blockedKeywords) {
      if (content.toLowerCase().includes(keyword.toLowerCase())) {
        throw new Error('Message contains prohibited content');
      }
    }
  }
  
  private async checkRateLimits(): Promise<void> {
    const limits = this.agent.metadata.constraints.rate_limits;
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    // Check hourly message limit
    const { count } = await supabase
      .from('agent_messages')
      .select('*', { count: 'exact' })
      .eq('user_id', this.userId)
      .eq('agent_id', this.agent.id)
      .gte('created_at', oneHourAgo.toISOString());
      
    if ((count || 0) >= limits.messages_per_hour) {
      throw new Error('Rate limit exceeded. Please try again later.');
    }
  }
}
```

### Real-time Conversation Updates

```typescript
// ✅ DO: Real-time conversation features
export function ConversationInterface({ agent, conversationId }: ConversationProps) {
  const [messages, setMessages] = useState<AgentMessage[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected'>('disconnected');
  
  // Real-time subscription for new messages
  useEffect(() => {
    const channel = supabase
      .channel(`conversation_${conversationId}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'agent_messages',
          filter: `conversation_id=eq.${conversationId}`
        },
        (payload) => {
          const newMessage = payload.new as AgentMessage;
          setMessages(prev => [...prev, newMessage]);
          
          // Scroll to bottom
          setTimeout(() => {
            const container = document.getElementById('messages-container');
            container?.scrollTo({ top: container.scrollHeight, behavior: 'smooth' });
          }, 100);
        }
      )
      .subscribe((status) => {
        setConnectionStatus(status === 'SUBSCRIBED' ? 'connected' : 'disconnected');
      });
      
    return () => {
      supabase.removeChannel(channel);
    };
  }, [conversationId]);
  
  const sendMessage = async (content: string) => {
    if (!content.trim()) return;
    
    setIsTyping(true);
    
    try {
      const conversationManager = new ConversationManager(agent, conversationId, userId);
      await conversationManager.sendMessage(content);
      
      // Clear input
      setInputValue('');
      
    } catch (error) {
      console.error('Send message error:', error);
      toast.error('Failed to send message');
    } finally {
      setIsTyping(false);
    }
  };
  
  return (
    <div className="flex flex-col h-full">
      {/* Connection status */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center space-x-2">
          <Avatar>
            <AvatarFallback>{agent.name[0]}</AvatarFallback>
          </Avatar>
          <div>
            <h3 className="font-semibold">{agent.name}</h3>
            <p className="text-sm text-gray-500">{agent.description}</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${
            connectionStatus === 'connected' ? 'bg-green-500' : 'bg-red-500'
          }`} />
          <span className="text-xs text-gray-500">{connectionStatus}</span>
        </div>
      </div>
      
      {/* Messages */}
      <div id="messages-container" className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <MessageBubble 
            key={message.id} 
            message={message} 
            isUser={message.role === 'user'} 
          />
        ))}
        
        {isTyping && (
          <div className="flex items-center space-x-2 text-gray-500">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100" />
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200" />
            </div>
            <span className="text-sm">{agent.name} is typing...</span>
          </div>
        )}
      </div>
      
      {/* Input */}
      <MessageInput onSend={sendMessage} disabled={isTyping} />
    </div>
  );
}
```

## **Agent Tools Integration**

### Built-in Tools System

```typescript
// ✅ DO: Extensible tools architecture
export interface AgentTool {
  name: string;
  description: string;
  parameters: ToolParameter[];
  execute: (params: Record<string, any>, context: ToolContext) => Promise<ToolResult>;
}

export const BUILTIN_TOOLS: Record<string, AgentTool> = {
  web_search: {
    name: 'web_search',
    description: 'Search the internet for current information',
    parameters: [
      { name: 'query', type: 'string', required: true, description: 'Search query' },
      { name: 'num_results', type: 'number', required: false, description: 'Number of results' }
    ],
    execute: async (params, context) => {
      const { query, num_results = 5 } = params;
      
      // Implement web search
      const results = await searchWeb(query, num_results);
      
      return {
        success: true,
        data: results,
        metadata: {
          query,
          results_count: results.length,
          search_time: new Date().toISOString()
        }
      };
    }
  },
  
  calculate: {
    name: 'calculate',
    description: 'Perform mathematical calculations',
    parameters: [
      { name: 'expression', type: 'string', required: true, description: 'Mathematical expression' }
    ],
    execute: async (params, context) => {
      const { expression } = params;
      
      try {
        // Safely evaluate mathematical expression
        const result = evaluateExpression(expression);
        
        return {
          success: true,
          data: { result, expression },
          metadata: {
            calculation_time: new Date().toISOString()
          }
        };
      } catch (error) {
        return {
          success: false,
          error: 'Invalid mathematical expression',
          data: null
        };
      }
    }
  },
  
  get_weather: {
    name: 'get_weather',
    description: 'Get current weather information for a location',
    parameters: [
      { name: 'location', type: 'string', required: true, description: 'City name or coordinates' }
    ],
    execute: async (params, context) => {
      const { location } = params;
      
      try {
        const weather = await fetchWeatherData(location);
        
        return {
          success: true,
          data: weather,
          metadata: {
            location,
            fetched_at: new Date().toISOString()
          }
        };
      } catch (error) {
        return {
          success: false,
          error: 'Failed to fetch weather data',
          data: null
        };
      }
    }
  }
};

// Tool execution engine
export class ToolExecutor {
  private agent: Agent;
  private context: ToolContext;
  
  constructor(agent: Agent, context: ToolContext) {
    this.agent = agent;
    this.context = context;
  }
  
  async executeTool(toolName: string, parameters: Record<string, any>): Promise<ToolResult> {
    // Check if agent has access to tool
    if (!this.agent.tools.includes(toolName)) {
      throw new Error(`Agent does not have access to tool: ${toolName}`);
    }
    
    // Get tool definition
    const tool = BUILTIN_TOOLS[toolName];
    if (!tool) {
      throw new Error(`Tool not found: ${toolName}`);
    }
    
    // Validate parameters
    this.validateParameters(tool.parameters, parameters);
    
    // Check tool usage limits
    await this.checkToolLimits(toolName);
    
    // Execute tool
    const result = await tool.execute(parameters, this.context);
    
    // Log tool usage
    await this.logToolUsage(toolName, parameters, result);
    
    return result;
  }
  
  private validateParameters(schema: ToolParameter[], params: Record<string, any>): void {
    for (const param of schema) {
      if (param.required && !(param.name in params)) {
        throw new Error(`Missing required parameter: ${param.name}`);
      }
      
      if (param.name in params) {
        const value = params[param.name];
        
        // Type validation
        if (param.type === 'string' && typeof value !== 'string') {
          throw new Error(`Parameter ${param.name} must be a string`);
        }
        if (param.type === 'number' && typeof value !== 'number') {
          throw new Error(`Parameter ${param.name} must be a number`);
        }
      }
    }
  }
}
```

## **Agent Analytics & Monitoring**

### Usage Analytics

```typescript
// ✅ DO: Comprehensive agent analytics
export class AgentAnalytics {
  static async getAgentMetrics(agentId: string, period: 'day' | 'week' | 'month' = 'week') {
    const startDate = new Date();
    switch (period) {
      case 'day':
        startDate.setDate(startDate.getDate() - 1);
        break;
      case 'week':
        startDate.setDate(startDate.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(startDate.getMonth() - 1);
        break;
    }
    
    // Get conversation metrics
    const { data: conversations } = await supabase
      .from('agent_messages')
      .select('conversation_id, created_at, role')
      .eq('agent_id', agentId)
      .gte('created_at', startDate.toISOString());
      
    // Calculate metrics
    const totalMessages = conversations?.length || 0;
    const uniqueConversations = new Set(conversations?.map(c => c.conversation_id)).size;
    const userMessages = conversations?.filter(c => c.role === 'user').length || 0;
    const agentResponses = conversations?.filter(c => c.role === 'assistant').length || 0;
    
    // Response rate
    const responseRate = userMessages > 0 ? (agentResponses / userMessages) * 100 : 0;
    
    // Usage over time
    const usageByDay = this.groupMessagesByDay(conversations || []);
    
    return {
      total_messages: totalMessages,
      unique_conversations: uniqueConversations,
      user_messages: userMessages,
      agent_responses: agentResponses,
      response_rate: responseRate,
      usage_trend: usageByDay,
      period
    };
  }
  
  static async getPopularAgents(limit = 10) {
    const { data } = await supabase
      .from('agents')
      .select(`
        id,
        name,
        description,
        is_public,
        user_data!inner(name),
        agent_messages(count)
      `)
      .eq('is_public', true)
      .order('agent_messages.count', { ascending: false })
      .limit(limit);
      
    return data;
  }
  
  static async getAgentPerformance(agentId: string) {
    // Get recent conversations
    const { data: messages } = await supabase
      .from('agent_messages')
      .select('conversation_id, role, created_at')
      .eq('agent_id', agentId)
      .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: true });
      
    if (!messages?.length) return null;
    
    // Group by conversation
    const conversationGroups = this.groupByConversation(messages);
    
    // Calculate average response time
    const responseTimes = this.calculateResponseTimes(conversationGroups);
    const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    
    // Calculate conversation completion rate
    const completedConversations = conversationGroups.filter(conv => {
      const lastMessage = conv[conv.length - 1];
      return lastMessage.role === 'assistant';
    }).length;
    
    const completionRate = (completedConversations / conversationGroups.length) * 100;
    
    return {
      average_response_time: avgResponseTime,
      completion_rate: completionRate,
      total_conversations: conversationGroups.length,
      response_times: responseTimes
    };
  }
  
  private static groupMessagesByDay(messages: any[]) {
    const grouped = messages.reduce((acc, message) => {
      const date = new Date(message.created_at).toDateString();
      acc[date] = (acc[date] || 0) + 1;
      return acc;
    }, {});
    
    return Object.entries(grouped).map(([date, count]) => ({
      date,
      count
    }));
  }
}
```

## **Agent Security & Compliance**

### Content Filtering & Safety

```typescript
// ✅ DO: Agent safety and content moderation
export class AgentSafety {
  static async moderateContent(content: string, agentId: string): Promise<ModerationResult> {
    try {
      // Get agent's content filters
      const { data: agent } = await supabase
        .from('agents')
        .select('metadata')
        .eq('id', agentId)
        .single();
        
      const contentFilters = agent?.metadata?.constraints?.content_filters || [];
      
      // Check against filters
      const violations = [];
      
      for (const filter of contentFilters) {
        const violation = await this.checkFilter(content, filter);
        if (violation) {
          violations.push(violation);
        }
      }
      
      // Use external moderation service
      const externalResult = await this.moderateWithService(content);
      
      return {
        is_safe: violations.length === 0 && externalResult.is_safe,
        violations,
        confidence: externalResult.confidence,
        categories: externalResult.categories
      };
      
    } catch (error) {
      console.error('Content moderation error:', error);
      return {
        is_safe: false,
        violations: ['moderation_error'],
        confidence: 0,
        categories: []
      };
    }
  }
  
  static async validateAgentInstructions(instructions: string): Promise<ValidationResult> {
    // Check for harmful instructions
    const harmfulPatterns = [
      /generate\s+fake\s+documents/i,
      /create\s+misleading\s+information/i,
      /impersonate\s+real\s+people/i,
      /bypass\s+safety\s+measures/i
    ];
    
    const violations = [];
    
    for (const pattern of harmfulPatterns) {
      if (pattern.test(instructions)) {
        violations.push({
          type: 'harmful_instruction',
          pattern: pattern.source,
          severity: 'high'
        });
      }
    }
    
    return {
      is_valid: violations.length === 0,
      violations,
      recommendations: violations.length > 0 
        ? ['Remove harmful instructions', 'Focus on helpful and safe behaviors']
        : []
    };
  }
}
```

## **Best Practices Summary**

- **Always validate agent configurations** before creation
- **Implement proper rate limiting** for conversations
- **Use RLS policies** to protect agent data
- **Monitor agent performance** and usage patterns
- **Implement content moderation** for safety
- **Cache frequently accessed data** for performance
- **Log all agent activities** for debugging
- **Validate user permissions** for agent operations
- **Handle errors gracefully** with user feedback
- **Use real-time updates** for better UX

Reference related documentation: [@ai-agents.mdc](mdc:.cursor/rules/ai-agents.mdc), [@1-supabase-database-setup.mdc](mdc:.cursor/rules/1-supabase-database-setup.mdc), [@2-authentication.mdc](mdc:.cursor/rules/2-authentication.mdc)
description:
globs:
alwaysApply: false
---
