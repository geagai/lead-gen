description: Reusable inline editor component with edit button, Tiptap editor and save logic for updating static page content stored in the `pages` table.

# PageEditor Component

## Purpose
Provides an admin-only on-page editing experience for static pages (Terms of Service, Privacy Policy, Contact Us). Follows existing authentication and Supabase patterns.

## Location
`components/page-editor.tsx`

## Features
- Renders HTML content for visitors.
- Detects admin status via `is_admin()` RPC.
- Admins see an "Edit" button (top-right).  
  Clicking toggles a Tiptap WYSIWYG editor plus **Save / Cancel**.
- Saves HTML back to the appropriate column (`terms_service`, `privacy_policy`, or `contact_us`) in the single-row `pages` table using Supabase JS client (update â†’ insert fallback).
- Toast notifications on success/failure.
- No impact on authentication logic; reuses existing `createClient()` and RPC.

## Usage
```tsx
// Server component fetches content
const { data: pageRow } = await supabase.from('pages').select('*').limit(1).maybeSingle()

<PageEditor
  column="terms_service"
  initialContent={pageRow?.terms_service}
/>
```

## Styling
- Uses Tailwind & existing `Button` + shared `RichTextEditor`.
- Wrapper `className` prop allows page-specific margins.

## Security / RLS
- Reads & writes via authenticated Supabase client, relying on RLS:  
  `Admins manage pages`, `Public read pages`.

## Future Extensions
- Add versioning (new `page_versions` table).
- Track edit history or author.
- Support dynamic page slugs instead of fixed columns.
description:
globs:
alwaysApply: false
---
