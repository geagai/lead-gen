---
description: This file explains
alwaysApply: false
---
- **Page Purpose**
  - Central location for administrators to configure global website settings.
  - Affects dynamic theme variables (colors) and Stripe/API credentials that are read at runtime on the server.

- **High-Level Flow**
  1. Client component (`AdminSettingsClient`) receives `initialSettings` from `app/admin-settings/page.tsx` (server component).
  2. Admin verification occurs on mount; non-admins are redirected.
  3. Form state (`settings`) is hydrated with DB row.  All inputs are controlled.
  4. Saving triggers `PUT`/`POST` request to `/api/.../update-profile` (see route) that persists fields in the `admin_settings` Supabase table.
  5. After a successful save, the `RootLayout` re-reads the table on next SSR pass and injects CSS variables.

- **UI Structure**
  - Card 1: *Stripe & UI Configuration*
    - `stripe_publishable_key`
    - `stripe_secret`
    - `stripe_webhook_secret`
    - `show_header` (boolean select, left column)
    - `sticky_header` (boolean select, right of Show Header)
    - `dev_mode` (boolean select, underneath Show Header)
    - `email` (email input, spans two columns) - Contact form destination email
  - Card 2: *Page Content Management*
    - `terms_service` (Tiptap WYSIWYG editor)
    - `privacy_policy` (Tiptap WYSIWYG editor)
    - `contact_us` (Tiptap WYSIWYG editor)
  - Card 3: *Pricing Page*
    - `pricing_page_headline` (text input)
    - `pricing_page_description` (text area)
    - `pricing_page_faq` (repeater field for Q&A, stored as JSONB)
  - Card 4: *Theme Colors*
    - Uses `Tabs` with `Light` and `Dark` triggers.
    - Each tab shows a `Clear` button that resets that theme’s palette.
    - Grid of color pickers → hex values (#RRGGBB).
    - Light defaults are hard-coded; Dark defaults null → fallback to design defaults in layout.

- **Dynamic Theming**
  - `lib/utils.ts::hexToHsl` converts hex → HSL string acceptable by Tailwind `hsl(var(--primary))` utilities.
  - `app/layout.tsx` pulls one row from `admin_settings` and constructs two maps:
    - `vars` (light) and `darkVars` (dark).
  - XSS-safe inline `<style>` builds `:root { … } html.dark { … }` declarations so colors work without hydration flash.

- **Tailwind Integration**
  - `tailwind.config.ts` exposes CSS variables as semantic color tokens: `primary`, `secondary`, `link`, `headerBg`, etc.
  - Any component can use `text-link` or `bg-headerBg` to remain in sync with admin settings.

- **Sticky Header Option**
  - New admin setting: `sticky_header` (boolean)
  - UI Placement: To the right of `Show Header` in the two-column layout. `Developer Mode` is now underneath `Show Header`.
  - Behavior:
    - If `sticky_header` is TRUE or NULL, the header remains sticky (current implementation).
    - If `sticky_header` is FALSE, the header scrolls with the rest of the page (not sticky).
  - Default: TRUE (or NULL, which is treated as sticky for backward compatibility).
  - Database: See schema below for new column.
  - Application: Update header logic to check this setting and apply sticky or non-sticky behavior accordingly.

- **Page Content Management**
  - A new "Page Content Management" card allows admins to edit static page content directly from the admin settings.
  - **Terms of Service:** WYSIWYG editor for `/terms-service` page content
  - **Privacy Policy:** WYSIWYG editor for `/privacy-policy` page content  
  - **Contact Us:** WYSIWYG editor for `/contact` page content
  - Uses the same `RichTextEditor` component as footer settings for consistent editing experience
  - Content is stored in the `pages` table with columns: `terms_service`, `privacy_policy`, `contact_us`
  - Automatic upsert logic handles creating the first row if none exists
  - Changes are saved alongside other admin settings in one transaction

- **Contact Form Integration**
  - New `email` field in Stripe & UI Configuration section
  - Email address where contact form submissions will be sent
  - Used by `/api/contact` route to send notification emails
  - Currently logs email content to console (ready for email service integration)

- **Pricing Page Customization**
  - A new "Pricing Page" card is available in admin settings.
  - **Headline:** A text input (`pricing_page_headline`) to set the main title on the `/pricing` page.
  - **Description:** A text area (`pricing_page_description`) for the paragraph below the headline.
  - **FAQ:** A repeater field (`pricing_page_faq`) to manage a list of questions and answers. Each item has a `question` (text) and `answer` (text). This is stored as a JSONB array of objects in the database.
  - **Fallback:** If any of these fields are NULL in the database, the pricing page will display the original, hard-coded content as a fallback.
  - **Text Removal:** The static text "14-day free trial" and "No setup fees" will be removed from the pricing page.

## Database Schema (Supabase)
```sql
create table public.admin_settings (
  id uuid primary key default uuid_generate_v4(),
  created_at timestamptz default timezone('utc', now()),
  updated_at timestamptz default timezone('utc', now()),

  -- Stripe credentials
  stripe_publishable_key text,
  stripe_secret           text,
  stripe_webhook_secret   text,

  -- UI toggles
  show_header boolean,  -- show/hide <Navigation>
  sticky_header boolean, -- new: sticky header toggle (TRUE/NULL = sticky, FALSE = not sticky)
  dev_mode    boolean,  -- expose dev JSON blocks & localhost helpers (now underneath Show Header)

  -- Contact form
  email text, -- destination email for contact form submissions

  -- Pricing Page Content
  pricing_page_headline    text,
  pricing_page_description text,
  pricing_page_faq         jsonb,

  /*
   * Light-theme palette (hex #RRGGBB).  Any NULL falls back to design defaults
   * defined in ../3-styling.mdc.  Names map 1-to-1 to CSS vars in app/layout.tsx.
   */
  primary_color            text,
  secondary_color          text,
  background_color         text,
  headline_text_color      text,
  paragraph_text_color     text,
  button_color             text,
  button_hover_color       text,
  button_text_color        text,
  link_color               text,
  link_hover_color         text,
  header_background_color  text,

  /* Dark-theme equivalents (prefixed with dark_) */
  dark_primary_color            text,
  dark_secondary_color          text,
  dark_background_color         text,
  dark_headline_text_color      text,
  dark_paragraph_text_color     text,
  dark_button_color             text,
  dark_button_hover_color       text,
  dark_button_text_color        text,
  dark_link_color               text,
  dark_link_hover_color         text,
  dark_header_background_color  text
);

-- Page content table for static pages
create table public.pages (
  id uuid primary key default uuid_generate_v4(),
  terms_service text,    -- HTML content for /terms-service page
  privacy_policy text,   -- HTML content for /privacy-policy page  
  contact_us text,       -- HTML content for /contact page
  created_at timestamptz default timezone('utc', now()),
  updated_at timestamptz default timezone('utc', now())
);

-- Contact form submissions table
create table public.submissions (
  id uuid primary key default uuid_generate_v4(),
  name text,
  email text,
  subject text,
  message text,
  created_at timestamptz default timezone('utc', now())
);
```

> Tip: When adding a new design token (e.g. `warning_color`) always create **both** light & dark columns, update `AdminSettingsClient` form, and map them in `app/layout.tsx`.

---

- **Server Routes**
  - API routes under `app/api` handle saving and type validation.
  - Ensure only signed-in users with `role = 'ADMIN'` can write.

- **Edge Cases & UX**
  - Null dark-mode fields → fallback to existing dark palette.
  - Color pickers are `48px` tall for better usability.
  - Duplicate tab sets are **not** allowed; only Theme Colors contains Tabs.

- **Pricing Page Logic**
  - The `/pricing` page fetches data from the `admin_settings` table.
  - If `pricing_page_headline` is not NULL, its value replaces the default headline.
  - If `pricing_page_description` is not NULL, its value replaces the default description.
  - If `pricing_page_faq` is not NULL and is a valid JSON array, it replaces the default FAQ section.
  - The static text "14-day free trial" and "No setup fees" are removed.

- **Testing Tips**
  - Switch system theme or use `.dark` on `<html>` to verify dark variables.
  - Clear caches / reload to force server re-fetch of settings.
  - Use Supabase dashboard to inspect stored hex values match pickers.

globs:
alwaysApply: false
---

- **Sticky Header Logic**
  - The application should read the `sticky_header` value from the `admin_settings` table.
  - If `sticky_header` is TRUE or NULL, apply the sticky header CSS/class (current behavior).
  - If `sticky_header` is FALSE, remove the sticky header CSS/class so the header scrolls with the page.
  - This logic should be implemented wherever the header is rendered, using the value from the settings context.

