## AI-Agents Landing Page – Creation Process

This document walks through each step we followed to bring the **AI-Agents** landing page into the existing Next.js Boilerplate, while ensuring it works both as a standalone sub-app *and* when routed from the main application. Use this checklist as a reference for future page migrations.

---
### 1  Plan & Repo Analysis  
1. Identified **source repo**: `https://github.com/geviai/ai-agent`.
2. Located the homepage implementation in that repo: `app/page.tsx`.
3. Audited dependencies (icons, hooks, UI primitives) and mapped them to equivalents that already exist in the boilerplate (`lucide-react`, shadcn/ui, `useAuth`).

### 2  Create Sub-module Skeleton  
1. Created an **empty folder** at repo root: `ai-agents/`, committed with a `.gitkeep` to establish sub-app namespace.
2. Added a **route shim** in the main app (`app/ai-agents/page.tsx`) so `/ai-agents` resolves, even before content is ready.

### 3  Copy & Inline Homepage Mark-up  
1. Copied JSX from the AI-Agents repo’s `app/page.tsx`.
2. Pasted **directly** into `ai-agents/page.tsx` so the sub-module contains its own page logic (benefit: can run standalone inside Turborepo later).
3. Replaced original imports with boilerplate equivalents:
   * `useAuth` → from `components/auth-provider`.
   * UI components (`Button`, `Card`, …) → shadcn versions in `/components/ui`.
4. Removed code that fetched its own theme; we rely on the parent layout for CSS variables.

### 4  Header & Footer Deduplication  
1. During first integration we imported `<Navigation>` and `<Footer>` directly in `ai-agents/page.tsx` for a quick preview.
2. Later, to avoid duplicates (the main `app/layout.tsx` already renders those), we **deleted** local header/footer imports and wrappers, leaving only core content.

### 5  Auth-Aware Behaviour  
1. Original page redirected signed-in users to `/agents`.
2. Requirement changed → we **removed redirect** so logged-in users stay on page.
3. Added optional headline logic (show "AI Agents" only for non-admin users); now removed at client’s request.

### 6  Theme & Global Styles  
1. Existing layout already injects CSS variables from `admin_settings` cache.
2. Added new variable `--headline` (light & dark) in `app/layout.tsx` mapping to `headline_text_color`.
3. Extended `globals.css`:
   * `h1–h6 { color: hsl(var(--headline)); margin-top: 2rem; }` – global headline styling.
4. On page we reference theme using Tailwind utilities (`text-primary`, `bg-primary/10`, etc.)—these resolve to CSS vars.

### 7  Main-App Route Re-export  
* To make `/ai-agents` work when main app is built **without** Turborepo, we created `app/ai-agents/page.tsx` that simply re-exports the component from `../../ai-agents/page.tsx`.

### 8  Key Patterns to Re-use  
1. **Copy JSX** → Paste into sub-folder → Swap imports.
2. **Rely on global layout** for header/footer/theme; remove local copies.
3. **Expose CSS vars** in layout; reference via Tailwind utilities.
4. **Avoid server data-fetch** inside feature pages when layout already provides needed theme/auth context.
5. If main app needs to surface the same page, create a **thin re-export route** instead of duplicating JSX.

---
### 9  Checklist for Future Page Migrations
- [ ] Locate source page and dependencies.
- [ ] Create destination folder under `SUBMODULE_NAME/`.
- [ ] Paste JSX; replace imports with project equivalents.
- [ ] Remove redundant header/footer; use parent layout.
- [ ] Ensure styling uses project CSS variables (`--primary`, `--headline`, …).
- [ ] Handle auth logic via `useAuth`; avoid redirects unless specified.
- [ ] Add route shim in `app/SUBMODULE_NAME/page.tsx` that re-exports sub-module page.
- [ ] Update `app/layout.tsx` & `globals.css` if new theme vars or global styles are needed.
- [ ] Test in both contexts: root route (`/submodule`) & standalone (when sub-app is run alone).

Following this recipe will keep future LLM-generated pages consistent with the established architecture and theme system.
description:
globs:
alwaysApply: false
---
