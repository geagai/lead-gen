---
description: This file provides information on the /edit-product-stripe page. Use this file when working with or making changes to the /edit-product-stripe page.
alwaysApply: false
---
# /edit-product-stripe Page

## Purpose
Allows **admins** to edit an existing Stripe product and its attached pricing options via the unified `ProductForm` component.

## Route
`/edit-product-stripe?id=<stripe_product_id>`

## Access Control
* Requires authentication and `admin` role.
* Uses Supabase Auth. Non-admins are redirected to `/dashboard`; unauthenticated users are redirected to `/login`.
* Follows the global **server-session hydration** pattern (see `2-authentication.mdc §4.1`) so the header never flashes public links.

## Component Structure
| File | Type | Responsibility |
|------|------|----------------|
| `app/edit-product-stripe/page.tsx` | **Client page** wrapped in `<Suspense>` | Coordinates auth+permission checks, Stripe config check, product fetch, and renders `ProductForm`. |
| `ProductForm` | Re-usable form component | Handles all product fields and price list editing. |

> ❗ **Future** – we may convert the page wrapper to a *server component* (mirror of `/admin-settings`) and keep the heavy Stripe fetch in a child client component.  The doc will be updated when that refactor lands.

## Data-fetch / Auth Flow (Client)
1. **Auth check** – `supabase.auth.getUser()`; redirect to `/login` if null.
2. **Role check** – query `user_data` for `user_role`; redirect if not `admin`.
3. **Stripe key check** – query `admin_settings` for `stripe_secret` & `stripe_publishable_key`; show warning card if missing.
4. **Product fetch** – GET `/api/stripe/get-product?id=<id>` (server route handles Stripe SDK call).
5. **Transform** – convert Stripe response to `ProductFormData` (including prices metadata such as trials).
6. **Render** – pass `initialData` to `<ProductForm mode="edit" />`.
7. **Submit** – on save, POST to `/api/stripe/edit-product` which updates product & prices in Stripe.

## UI States
* **Loading spinner** while auth / product fetch in progress.
* **Access Denied** card if user not admin.
* **Stripe Configuration Required** card if keys missing.
* **Product Not Found** card if API 404.
* **Edit Form** once data loaded.

## Dev Utilities
The header includes `<ClearProductCacheButton />` so admins can invalidate the in-process product cache while testing.

## Related API Routes
* `app/api/stripe/get-product/route.ts` – fetches product & prices for editing.
* `app/api/stripe/edit-product/route.ts` – persists form changes back to Stripe.

## Future Enhancements
* Convert outer page to server component to consolidate auth logic.
* Add optimistic UI updates after save.
* Breadcrumbs / back navigation to `/my-products`.
description:
globs:
alwaysApply: false
---

