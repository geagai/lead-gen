# Development Workflow & TaskMaster Integration

This document provides comprehensive guidance for development workflow, TaskMaster integration, and development best practices when working with APP_NAME.

## **Development Workflow Overview**

APP_NAME is designed for efficient development using modern tools and practices:

- **TaskMaster AI Integration** - AI-powered task management and development assistance
- **Next.js 15 Development** - Modern React development with App Router
- **Supabase Integration** - Database and authentication management
- **Testing & Quality Assurance** - Comprehensive testing strategies
- **Deployment Pipeline** - Automated deployment and CI/CD
- **Code Quality** - ESLint, Prettier, and TypeScript enforcement

## **TaskMaster Integration**

### TaskMaster Configuration

The project includes TaskMaster for AI-assisted development workflow:

```json
// .taskmaster/config.json
{
  "project": {
    "name": "APP_NAME",
    "description": "APP_DESCRIPTION",
    "version": "1.0.0"
  },
  "ai": {
    "main_model": "claude-3-sonnet-20241022",
    "research_model": "claude-3-sonnet-20241022",
    "fallback_model": "gpt-4o-mini",
    "max_tokens": 4000,
    "temperature": 0.1
  },
  "global": {
    "defaultTag": "master",
    "defaultSubtasks": 3,
    "defaultPriority": "medium"
  }
}
```

### Development Task Templates

```typescript
// ✅ DO: Use TaskMaster templates for consistent development
export const DEVELOPMENT_TASK_TEMPLATES = {
  feature_implementation: {
    title: "Implement [Feature Name]",
    description: "Complete implementation of [feature] with tests and documentation",
    priority: "high",
    subtasks: [
      "Design component architecture and data flow",
      "Implement core functionality with TypeScript",
      "Add comprehensive error handling and validation",
      "Write unit and integration tests",
      "Update documentation and type definitions",
      "Test across different user roles and permissions"
    ],
    dependencies: [],
    testStrategy: "Unit tests, integration tests, manual testing",
    details: `
    Implementation Guidelines:
    - Follow existing authentication patterns
    - Use Supabase RLS for data security
    - Implement proper TypeScript types
    - Add loading and error states
    - Follow component patterns from documentation
    - Test with different user roles
    `
  },
  
  bug_fix: {
    title: "Fix: [Bug Description]",
    description: "Investigate and resolve [bug] with proper testing",
    priority: "high",
    subtasks: [
      "Reproduce the bug and document steps",
      "Identify root cause and affected components",
      "Implement fix with minimal changes",
      "Add tests to prevent regression",
      "Verify fix across different scenarios",
      "Update relevant documentation"
    ],
    testStrategy: "Regression testing, unit tests for the fix",
    details: `
    Bug Fix Guidelines:
    - Document the reproduction steps clearly
    - Make minimal changes to fix the issue
    - Add tests to prevent future occurrences
    - Consider edge cases and user permissions
    - Test the fix thoroughly before deployment
    `
  },
  
  api_endpoint: {
    title: "Create API endpoint: [Endpoint Name]",
    description: "Implement new API route with authentication and validation",
    priority: "medium",
    subtasks: [
      "Design API specification and data models",
      "Implement route handler with authentication",
      "Add input validation and error handling",
      "Implement database operations with RLS",
      "Write API tests and documentation",
      "Test with different user permissions"
    ],
    testStrategy: "API testing, authentication testing, validation testing",
    details: `
    API Development Guidelines:
    - Always validate authentication first
    - Use Supabase RLS for data access
    - Implement proper input validation
    - Return consistent error responses
    - Follow RESTful conventions
    - Document the API specification
    `
  }
};
```

### TaskMaster Workflow Process

```bash
# 1. Initialize TaskMaster (if not already done)
task-master init --name="APP_NAME" --description="APP_DESCRIPTION"

# 2. Start development session
task-master list                    # View current tasks
task-master next                    # Get next recommended task
task-master show <task-id>          # View task details

# 3. Break down complex tasks
task-master expand --id=<task-id> --research --force

# 4. Work on subtasks iteratively
task-master show <subtask-id>       # Understand requirements
task-master update-subtask --id=<subtask-id> --prompt="Implementation plan: ..."

# 5. Mark progress and completion
task-master set-status --id=<subtask-id> --status=in-progress
task-master set-status --id=<subtask-id> --status=done

# 6. Update dependent tasks when needed
task-master update --from=<task-id> --prompt="Implementation changed to use..."
```

## **Development Environment Setup**

### Local Development Setup

```bash
# 1. Clone and install dependencies
git clone REPOSITORY_URL
cd PROJECT_FOLDER
npm install

# 2. Environment configuration
cp .env.example .env.local
# Fill in required environment variables

# 3. Database setup
npm run db:setup              # Initialize Supabase
npm run db:migrate            # Run migrations
npm run db:seed               # Seed initial data

# 4. Start development servers
npm run dev                   # Next.js development server
npm run dev:db                # Local Supabase (if using local)

# 5. Initialize TaskMaster
task-master init --rules cursor,windsurf
task-master models --setup   # Configure AI models
```

### Required Environment Variables

```bash
# Authentication
NEXTAUTH_SECRET=NEXTAUTH_SECRET
NEXTAUTH_URL=LOCALHOST_URL

# Supabase
NEXT_PUBLIC_SUPABASE_URL=SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=SUPABASE_ANON_KEY
SUPABASE_SERVICE_ROLE_KEY=SUPABASE_SERVICE_ROLE_KEY

# Stripe
STRIPE_SECRET_KEY=STRIPE_SECRET_KEY
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=STRIPE_PUBLISHABLE_KEY
STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET

# AI Models (for TaskMaster)
ANTHROPIC_API_KEY=ANTHROPIC_API_KEY
OPENAI_API_KEY=OPENAI_API_KEY

# Optional
REDIS_URL=redis://localhost:6379
```

## **Code Organization Patterns**

### File Structure Guidelines

```
app/                          # Next.js App Router
├── (auth)/                   # Route groups for layout
│   ├── login/
│   └── signup/
├── api/                      # API routes
│   ├── auth/                 # Authentication endpoints
│   ├── stripe/               # Payment endpoints
│   └── agents/               # AI agents endpoints
├── dashboard/                # Protected pages
├── settings/                 # User settings
└── globals.css               # Global styles

components/                   # Reusable components
├── ui/                       # shadcn/ui components
├── auth-provider.tsx         # Authentication context
├── theme-provider.tsx        # Theme management
└── navigation.tsx            # Main navigation

lib/                          # Utility libraries
├── auth.ts                   # NextAuth configuration
├── db.ts                     # Database utilities
├── stripe.ts                 # Stripe configuration
├── supabase.ts               # Supabase client
├── types.ts                  # TypeScript types
└── utils.ts                  # Helper functions

documentation/                # Project documentation
├── application-overview.mdc
├── database-schema.mdc
├── authentication-patterns.mdc
├── technology-stack.mdc
├── component-patterns.mdc
├── api-routes.mdc
├── mobile-deployment.mdc
├── payment-integration.mdc
├── ai-agents-platform.mdc
└── development-workflow.mdc
```

### Component Development Patterns

```typescript
// ✅ DO: Follow established component patterns
// 1. Server components for data fetching
export default async function DashboardPage() {
  const session = await auth();
  
  if (!session) {
    redirect('/login');
  }
  
  const userData = await getUserData(session.user.id);
  
  return (
    <div className="container mx-auto py-6">
      <DashboardHeader user={userData} />
      <DashboardContent userData={userData} />
    </div>
  );
}

// 2. Client components for interactivity
'use client';

export function DashboardContent({ userData }: DashboardContentProps) {
  const [activeTab, setActiveTab] = useState('overview');
  
  return (
    <Tabs value={activeTab} onValueChange={setActiveTab}>
      <TabsList>
        <TabsTrigger value="overview">Overview</TabsTrigger>
        <TabsTrigger value="agents">Agents</TabsTrigger>
        <TabsTrigger value="products">Products</TabsTrigger>
      </TabsList>
      
      <TabsContent value="overview">
        <OverviewTab userData={userData} />
      </TabsContent>
    </Tabs>
  );
}

// 3. Use proper TypeScript types
interface DashboardContentProps {
  userData: UserData;
}

interface UserData {
  id: string;
  name: string;
  email: string;
  role: 'user' | 'premium' | 'admin';
  subscription_status?: string;
  created_at: string;
}
```

## **Database Development Patterns**

### Supabase Integration Best Practices

```typescript
// ✅ DO: Use proper Supabase patterns
// 1. Server-side data fetching
export async function getUserAgents(userId: string) {
  const { data, error } = await supabase
    .from('agents')
    .select(`
      id,
      name,
      description,
      status,
      created_at,
      agent_messages(count)
    `)
    .eq('user_id', userId)
    .eq('status', 'active')
    .order('created_at', { ascending: false });
    
  if (error) {
    console.error('Database error:', error);
    throw new Error('Failed to fetch agents');
  }
  
  return data;
}

// 2. Client-side mutations with React Query
export function useCreateAgent() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (agentData: CreateAgentRequest) => {
      const response = await fetch('/api/agents', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(agentData)
      });
      
      if (!response.ok) {
        throw new Error('Failed to create agent');
      }
      
      return response.json();
    },
    onSuccess: () => {
      // Invalidate agents list
      queryClient.invalidateQueries({ queryKey: ['agents'] });
      toast.success('Agent created successfully');
    },
    onError: (error) => {
      toast.error('Failed to create agent');
      console.error('Agent creation error:', error);
    }
  });
}

// 3. Real-time subscriptions
export function useAgentMessages(agentId: string, conversationId: string) {
  const [messages, setMessages] = useState<AgentMessage[]>([]);
  
  useEffect(() => {
    // Initial fetch
    const fetchMessages = async () => {
      const { data } = await supabase
        .from('agent_messages')
        .select('*')
        .eq('agent_id', agentId)
        .eq('conversation_id', conversationId)
        .order('created_at', { ascending: true });
        
      setMessages(data || []);
    };
    
    fetchMessages();
    
    // Real-time subscription
    const channel = supabase
      .channel(`messages_${conversationId}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'agent_messages',
          filter: `conversation_id=eq.${conversationId}`
        },
        (payload) => {
          setMessages(prev => [...prev, payload.new as AgentMessage]);
        }
      )
      .subscribe();
      
    return () => {
      supabase.removeChannel(channel);
    };
  }, [agentId, conversationId]);
  
  return messages;
}
```

## **Testing Strategies**

### Testing Pyramid

```typescript
// ✅ DO: Comprehensive testing approach
// 1. Unit Tests (utilities, components)
// lib/utils.test.ts
import { formatDate, calculateAge } from './utils';

describe('Utility Functions', () => {
  test('formatDate should format dates correctly', () => {
    const date = new Date('2024-01-15');
    expect(formatDate(date)).toBe('January 15, 2024');
  });
  
  test('calculateAge should handle edge cases', () => {
    expect(calculateAge(null)).toBe(0);
    expect(calculateAge(undefined)).toBe(0);
  });
});

// 2. Component Tests
// components/ui/button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './button';

describe('Button Component', () => {
  test('renders with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
  
  test('calls onClick handler', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click</Button>);
    
    fireEvent.click(screen.getByText('Click'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  
  test('shows loading state', () => {
    render(<Button loading>Loading</Button>);
    expect(screen.getByText('Loading')).toBeInTheDocument();
    expect(screen.getByRole('button')).toBeDisabled();
  });
});

// 3. Integration Tests (API routes)
// app/api/agents/route.test.ts
import { POST } from './route';
import { auth } from '@/lib/auth';

jest.mock('@/lib/auth');

describe('/api/agents', () => {
  test('creates agent successfully', async () => {
    const mockSession = {
      user: { id: 'TEST_USER_ID', email: 'TEST_EMAIL' }
    };
    
    (auth as jest.Mock).mockResolvedValue(mockSession);
    
    const request = new Request('TEST_API_URL/agents', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: 'Test Agent',
        description: 'Test description',
        instructions: 'Test instructions'
      })
    });
    
    const response = await POST(request);
    expect(response.status).toBe(200);
    
    const data = await response.json();
    expect(data.name).toBe('Test Agent');
  });
  
  test('requires authentication', async () => {
    (auth as jest.Mock).mockResolvedValue(null);
    
    const request = new Request('TEST_API_URL/agents', {
      method: 'POST',
      body: JSON.stringify({})
    });
    
    const response = await POST(request);
    expect(response.status).toBe(401);
  });
});

// 4. End-to-End Tests (Playwright)
// tests/e2e/auth.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Authentication Flow', () => {
  test('user can sign up and login', async ({ page }) => {
    // Navigate to signup
    await page.goto('/signup');
    
    // Fill signup form
    await page.fill('[data-testid="email"]', 'TEST_EMAIL');
    await page.fill('[data-testid="password"]', 'password123');
    await page.fill('[data-testid="confirm-password"]', 'password123');
    
    // Submit form
    await page.click('[data-testid="signup-button"]');
    
    // Should redirect to dashboard
    await expect(page).toHaveURL('/dashboard');
    await expect(page.locator('h1')).toContainText('Welcome');
  });
  
  test('validates form inputs', async ({ page }) => {
    await page.goto('/signup');
    
    // Try to submit empty form
    await page.click('[data-testid="signup-button"]');
    
    // Should show validation errors
    await expect(page.locator('[data-testid="email-error"]')).toBeVisible();
    await expect(page.locator('[data-testid="password-error"]')).toBeVisible();
  });
});
```

### Test Configuration

```javascript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./tests/setup.ts'],
    globals: true,
    coverage: {
      reporter: ['text', 'html', 'lcov'],
      exclude: [
        'node_modules/',
        'tests/',
        '**/*.d.ts',
        '.next/',
        'coverage/'
      ]
    }
  },
  resolve: {
    alias: {
      '@': new URL('./src', import.meta.url).pathname
    }
  }
});
```

## **Code Quality & Standards**

### ESLint and Prettier Configuration

```json
// .eslintrc.json
{
  "extends": [
    "next/core-web-vitals",
    "@typescript-eslint/recommended",
    "prettier"
  ],
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "prefer-const": "error",
    "no-var": "error",
    "react/prop-types": "off",
    "react-hooks/exhaustive-deps": "warn"
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.test.tsx"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off"
      }
    }
  ]
}
```

### Git Workflow

```bash
# 1. Feature branch workflow
git checkout -b feature/user-authentication
git add .
git commit -m "feat: implement user authentication system

- Add NextAuth.js configuration
- Create login and signup pages
- Implement session management
- Add user role-based access control"

# 2. Code review process
git push origin feature/user-authentication
# Create pull request for review

# 3. Merge and cleanup
git checkout main
git pull origin main
git branch -d feature/user-authentication
```

### Commit Message Standards

```bash
# Format: type(scope): description
#
# Types:
# feat: New feature
# fix: Bug fix
# docs: Documentation changes
# style: Code style changes
# refactor: Code refactoring
# test: Adding tests
# chore: Maintenance tasks

# Examples:
feat(auth): add social login with Google OAuth
fix(payment): resolve Stripe webhook signature validation
docs(api): update API documentation for agents endpoint
style(components): format button component with prettier
refactor(database): optimize user query performance
test(auth): add unit tests for authentication utilities
chore(deps): update dependencies to latest versions
```

## **Performance Optimization**

### Next.js Performance Patterns

```typescript
// ✅ DO: Performance optimization patterns
// 1. Image optimization
import Image from 'next/image';

export function UserAvatar({ user }: { user: User }) {
  return (
    <Image
      src={user.avatar_url || '/default-avatar.png'}
      alt={`${user.name}'s avatar`}
      width={40}
      height={40}
      className="rounded-full"
      priority={false} // Only for above-the-fold images
    />
  );
}

// 2. Dynamic imports for code splitting
import dynamic from 'next/dynamic';

const HeavyChart = dynamic(() => import('./HeavyChart'), {
  loading: () => <ChartSkeleton />,
  ssr: false // Client-side only if needed
});

// 3. React Query for data management
export function useAgents() {
  return useQuery({
    queryKey: ['agents'],
    queryFn: fetchAgents,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus: false
  });
}

// 4. Memoization for expensive calculations
const MemoizedComponent = memo(function Component({ data }: { data: ComplexData }) {
  const processedData = useMemo(() => {
    return expensiveCalculation(data);
  }, [data]);
  
  return <div>{processedData}</div>;
});
```

## **Deployment & CI/CD**

### GitHub Actions Workflow

```yaml
# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm run test
        
      - name: Build application
        run: npm run build
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
```

## **Monitoring & Analytics**

### Error Tracking

```typescript
// ✅ DO: Comprehensive error tracking
// lib/error-tracking.ts
export class ErrorTracker {
  static logError(error: Error, context?: Record<string, any>) {
    console.error('Application error:', {
      message: error.message,
      stack: error.stack,
      context,
      timestamp: new Date().toISOString(),
      url: typeof window !== 'undefined' ? window.location.href : 'server'
    });
    
    // Send to error tracking service
    if (process.env.NODE_ENV === 'production') {
      // Sentry, LogRocket, etc.
    }
  }
  
  static logUserAction(action: string, data?: any) {
    console.log('User action:', {
      action,
      data,
      timestamp: new Date().toISOString()
    });
    
    // Send to analytics service
    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {
      // Google Analytics, Mixpanel, etc.
    }
  }
}

// Global error boundary
export function GlobalErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundary
      fallback={<ErrorFallback />}
      onError={(error, errorInfo) => {
        ErrorTracker.logError(error, errorInfo);
      }}
    >
      {children}
    </ErrorBoundary>
  );
}
```

## **Best Practices Summary**

- **Use TaskMaster for task management** and AI-assisted development
- **Follow established patterns** from documentation
- **Write comprehensive tests** at all levels
- **Implement proper error handling** and logging
- **Follow Git workflow** with meaningful commits
- **Optimize for performance** from the start
- **Monitor application health** in production
- **Document all new features** and changes
- **Review code thoroughly** before merging
- **Keep dependencies updated** and secure

This development workflow ensures consistent, high-quality development while leveraging the power of AI assistance through TaskMaster integration.
description:
globs:
alwaysApply: false
---
