# Component Patterns and UI Architecture

## üö® Critical Component Guidelines for LLMs

- **FOLLOW** existing component patterns and architecture
- **USE** the established design system (Tailwind + Radix UI)
- **MAINTAIN** semantic color classes for theming compatibility
- **IMPLEMENT** mobile-first responsive design
- **ENSURE** accessibility standards with proper ARIA attributes

## Component Architecture Overview

The application follows a **layered component architecture**:

1. **Base UI Components** (`components/ui/`) - Fundamental building blocks
2. **Feature Components** (`components/[feature]/`) - Feature-specific components
3. **Layout Components** - Navigation, headers, footers
4. **Page Components** (`app/`) - Full page implementations
5. **Provider Components** - Context and state management

## Base UI Components (shadcn/ui)

### Component Structure Pattern
All base UI components follow this structure:

```typescript
// components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

// Variant definitions using CVA
const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

// TypeScript interface with variant props
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

// Component implementation with forwardRef
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

### Key UI Components

#### Button Component
**Location**: `components/ui/button.tsx`
**Features**:
- Dynamic theming integration
- Multiple variants (default, destructive, outline, secondary, ghost, link)
- Size variants (default, sm, lg, icon)
- Admin color override support
- Hover state management

**Usage**:
```typescript
import { Button } from "@/components/ui/button"

// Basic usage
<Button>Click me</Button>

// With variants
<Button variant="outline" size="lg">Large Outline Button</Button>

// As child (renders as different element)
<Button asChild>
  <Link href="/dashboard">Dashboard</Link>
</Button>
```

#### Card Component
**Location**: `components/ui/card.tsx`
**Features**:
- Semantic structure (Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter)
- Consistent styling across application
- Shadow and border styling

**Usage**:
```typescript
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card description text</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card content goes here</p>
  </CardContent>
</Card>
```

#### Input Component
**Location**: `components/ui/input.tsx`
**Features**:
- Consistent styling
- Focus states
- Disabled states
- Form integration

**Usage**:
```typescript
import { Input } from "@/components/ui/input"

<Input
  type="email"
  placeholder="Enter your email"
  value={email}
  onChange={(e) => setEmail(e.target.value)}
/>
```

#### Dialog Component
**Location**: `components/ui/dialog.tsx`
**Features**:
- Accessible modal implementation
- Overlay and close functionality
- Keyboard navigation support

**Usage**:
```typescript
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"

<Dialog>
  <DialogTrigger asChild>
    <Button>Open Dialog</Button>
  </DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Dialog Title</DialogTitle>
      <DialogDescription>Dialog description</DialogDescription>
    </DialogHeader>
    <p>Dialog content</p>
  </DialogContent>
</Dialog>
```

## Styling Patterns

### Semantic Color System
The application uses semantic color classes that adapt to the dynamic theming system:

```typescript
// ‚úÖ CORRECT: Use semantic color classes
<div className="bg-primary text-primary-foreground">Primary content</div>
<div className="bg-secondary text-secondary-foreground">Secondary content</div>
<div className="bg-background text-foreground">Background content</div>
<div className="bg-card text-card-foreground border">Card content</div>
<div className="text-muted-foreground">Muted text</div>

// ‚ùå INCORRECT: Don't use hard-coded colors
<div className="bg-blue-500 text-white">Hard-coded colors</div>
```

### Color Variables Available
```css
/* Primary colors */
--primary: /* Primary brand color */
--primary-foreground: /* Text on primary background */

/* Secondary colors */
--secondary: /* Secondary accent color */
--secondary-foreground: /* Text on secondary background */

/* Background colors */
--background: /* Main background */
--foreground: /* Main text color */

/* Card colors */
--card: /* Card background */
--card-foreground: /* Card text */

/* Muted colors */
--muted: /* Muted background */
--muted-foreground: /* Muted text */

/* Accent colors */
--accent: /* Accent background */
--accent-foreground: /* Accent text */

/* Border and input */
--border: /* Border color */
--input: /* Input border */
--ring: /* Focus ring */

/* Destructive colors */
--destructive: /* Error/danger color */
--destructive-foreground: /* Text on destructive background */
```

### Responsive Design Patterns

#### Mobile-First Approach
```typescript
// ‚úÖ CORRECT: Mobile-first responsive design
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Content scales from 1 column on mobile to 3 on desktop */}
</div>

<div className="text-sm sm:text-base lg:text-lg">
  {/* Text scales with breakpoints */}
</div>

<div className="p-4 sm:p-6 lg:p-8">
  {/* Padding increases with screen size */}
</div>
```

#### Breakpoint Reference
- `sm:` - 640px and up (small tablets)
- `md:` - 768px and up (tablets)
- `lg:` - 1024px and up (desktops)
- `xl:` - 1280px and up (large desktops)
- `2xl:` - 1536px and up (extra large screens)

### Animation Patterns

#### Framer Motion Integration
```typescript
import { motion } from 'framer-motion'

// ‚úÖ Page transition pattern
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.6 }}
>
  Page content
</motion.div>

// ‚úÖ Hover animation pattern
<motion.div
  whileHover={{ scale: 1.05 }}
  whileTap={{ scale: 0.95 }}
  className="cursor-pointer"
>
  Interactive element
</motion.div>

// ‚úÖ List item animation pattern
{items.map((item, index) => (
  <motion.div
    key={item.id}
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.6, delay: index * 0.1 }}
  >
    {item.content}
  </motion.div>
))}
```

## Layout Components

### Navigation Component
**Location**: `components/navigation.tsx`

**Features**:
- Responsive navigation with mobile menu
- Authentication state integration
- Dynamic links based on user role
- Sticky positioning support

**Pattern**:
```typescript
export function Navigation({ sticky = true, siteName = 'APP_NAME' }: NavigationProps) {
  const { user, loading, signOut } = useAuth()
  
  return (
    <nav className={`${sticky ? 'sticky top-0' : 'relative'} z-50 border-b`}>
      {/* Navigation content */}
    </nav>
  )
}
```

### Footer Component
**Location**: `components/footer.tsx`

**Features**:
- Dynamic content from admin settings
- Social links integration
- Responsive design
- Conditional rendering on certain pages

## Feature Components

### Form Components

#### Form Pattern with React Hook Form
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'

const formSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
})

export function UserForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
    },
  })

  function onSubmit(values: z.infer<typeof formSchema>) {
    // Handle form submission
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Your name" {...field} />
              </FormControl>
              <FormDescription>This is your display name.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input type="email" placeholder="your@email.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

### Data Display Components

#### Data Table Pattern
```typescript
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'

interface DataTableProps<T> {
  data: T[]
  columns: Column<T>[]
}

export function DataTable<T>({ data, columns }: DataTableProps<T>) {
  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            {columns.map((column) => (
              <TableHead key={column.accessorKey}>{column.header}</TableHead>
            ))}
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((row, index) => (
            <TableRow key={index}>
              {columns.map((column) => (
                <TableCell key={column.accessorKey}>
                  {column.cell ? column.cell(row) : row[column.accessorKey]}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
```

### Loading States

#### Loading Component Patterns
```typescript
// ‚úÖ Skeleton loading pattern
import { Skeleton } from '@/components/ui/skeleton'

export function UserProfileSkeleton() {
  return (
    <div className="space-y-4">
      <Skeleton className="h-4 w-[250px]" />
      <Skeleton className="h-4 w-[200px]" />
      <Skeleton className="h-4 w-[150px]" />
    </div>
  )
}

// ‚úÖ Spinner loading pattern
export function LoadingSpinner({ size = 'default' }: { size?: 'sm' | 'default' | 'lg' }) {
  const sizeClasses = {
    sm: 'h-4 w-4',
    default: 'h-6 w-6',
    lg: 'h-8 w-8'
  }
  
  return (
    <div className="flex items-center justify-center">
      <div className={`animate-spin rounded-full border-2 border-primary border-t-transparent ${sizeClasses[size]}`} />
    </div>
  )
}
```

## Provider Components

### Context Pattern
```typescript
// ‚úÖ Context provider pattern
interface FeatureContextType {
  data: Data | null
  loading: boolean
  error: string | null
  refresh: () => Promise<void>
}

const FeatureContext = createContext<FeatureContextType | null>(null)

export function FeatureProvider({ children }: { children: React.ReactNode }) {
  const [data, setData] = useState<Data | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const refresh = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      const result = await fetchData()
      setData(result)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred')
    } finally {
      setLoading(false)
    }
  }, [])

  useEffect(() => {
    refresh()
  }, [refresh])

  return (
    <FeatureContext.Provider value={{ data, loading, error, refresh }}>
      {children}
    </FeatureContext.Provider>
  )
}

export function useFeature() {
  const context = useContext(FeatureContext)
  if (!context) {
    throw new Error('useFeature must be used within FeatureProvider')
  }
  return context
}
```

## Accessibility Patterns

### ARIA Attributes
```typescript
// ‚úÖ Proper ARIA usage
<button
  aria-label="Close dialog"
  aria-expanded={isOpen}
  aria-controls="menu-items"
  onClick={handleClose}
>
  <X className="h-4 w-4" />
</button>

<div
  role="alert"
  aria-live="polite"
  className="text-destructive"
>
  {errorMessage}
</div>

<nav aria-label="Main navigation">
  <ul role="menubar">
    <li role="none">
      <a href="/dashboard" role="menuitem">Dashboard</a>
    </li>
  </ul>
</nav>
```

### Focus Management
```typescript
// ‚úÖ Focus management pattern
export function Dialog({ open, onClose }: DialogProps) {
  const dialogRef = useRef<HTMLDivElement>(null)
  
  useEffect(() => {
    if (open && dialogRef.current) {
      dialogRef.current.focus()
    }
  }, [open])
  
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      onClose()
    }
  }
  
  return (
    <div
      ref={dialogRef}
      tabIndex={-1}
      onKeyDown={handleKeyDown}
      className="focus:outline-none"
    >
      {/* Dialog content */}
    </div>
  )
}
```

## Error Handling Patterns

### Error Boundary Component
```typescript
import React from 'react'

interface ErrorBoundaryState {
  hasError: boolean
  error?: Error
}

export class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error boundary caught an error:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="flex min-h-[400px] flex-col items-center justify-center">
          <h2 className="text-lg font-semibold">Something went wrong</h2>
          <p className="text-muted-foreground">Please refresh the page and try again.</p>
          <Button
            onClick={() => this.setState({ hasError: false })}
            className="mt-4"
          >
            Try again
          </Button>
        </div>
      )
    }

    return this.props.children
  }
}
```

### Error Display Patterns
```typescript
// ‚úÖ Error message component
export function ErrorMessage({ error, onRetry }: { error: string; onRetry?: () => void }) {
  return (
    <div className="rounded-md border border-destructive/20 bg-destructive/10 p-4">
      <div className="flex items-center gap-2">
        <AlertCircle className="h-4 w-4 text-destructive" />
        <p className="text-sm text-destructive">{error}</p>
      </div>
      {onRetry && (
        <Button variant="outline" size="sm" onClick={onRetry} className="mt-2">
          Try again
        </Button>
      )}
    </div>
  )
}
```

## Performance Patterns

### Lazy Loading
```typescript
// ‚úÖ Lazy loading pattern
import { lazy, Suspense } from 'react'

const HeavyComponent = lazy(() => import('./HeavyComponent'))

export function App() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <HeavyComponent />
    </Suspense>
  )
}
```

### Memoization Patterns
```typescript
// ‚úÖ Memoization for expensive operations
const ExpensiveComponent = memo(({ data }: { data: ComplexData }) => {
  const processedData = useMemo(() => {
    return processComplexData(data)
  }, [data])
  
  return <div>{processedData}</div>
})

// ‚úÖ Callback memoization
const MemoizedCallback = ({ onSave }: { onSave: (data: Data) => void }) => {
  const handleSave = useCallback((data: Data) => {
    onSave(data)
  }, [onSave])
  
  return <Form onSubmit={handleSave} />
}
```

## Anti-Patterns to Avoid

### ‚ùå Don't Use Hard-coded Styles
```typescript
// ‚ùå INCORRECT: Hard-coded colors
<div style={{ backgroundColor: '#3b82f6', color: 'white' }}>
  Hard-coded styling
</div>

// ‚úÖ CORRECT: Semantic classes
<div className="bg-primary text-primary-foreground">
  Semantic styling
</div>
```

### ‚ùå Don't Skip Accessibility
```typescript
// ‚ùå INCORRECT: Missing accessibility
<div onClick={handleClick}>Clickable div</div>

// ‚úÖ CORRECT: Proper button semantics
<button onClick={handleClick} aria-label="Perform action">
  Clickable button
</button>
```

### ‚ùå Don't Ignore Loading States
```typescript
// ‚ùå INCORRECT: No loading state
export function UserProfile() {
  const { data } = useUserData()
  return <div>{data?.name}</div>  // Shows nothing while loading
}

// ‚úÖ CORRECT: Proper loading state
export function UserProfile() {
  const { data, loading } = useUserData()
  
  if (loading) {
    return <UserProfileSkeleton />
  }
  
  return <div>{data?.name}</div>
}
```

### ‚ùå Don't Create Inconsistent Components
```typescript
// ‚ùå INCORRECT: Custom button without variants
export function CustomButton({ children }: { children: React.ReactNode }) {
  return (
    <button className="px-4 py-2 bg-blue-500 text-white rounded">
      {children}
    </button>
  )
}

// ‚úÖ CORRECT: Use existing Button component
import { Button } from '@/components/ui/button'

export function MyFeature() {
  return <Button>Click me</Button>
}
```

## Component Development Checklist

When creating new components:

- [ ] Use TypeScript for type safety
- [ ] Follow existing naming conventions
- [ ] Implement proper accessibility (ARIA attributes, keyboard navigation)
- [ ] Use semantic color classes for theming
- [ ] Include loading and error states
- [ ] Add responsive design considerations
- [ ] Test with different data states (empty, loading, error)
- [ ] Consider performance implications
- [ ] Add proper JSDoc comments for props
- [ ] Test keyboard navigation
- [ ] Verify mobile responsiveness

This component architecture ensures consistency, accessibility, and maintainability across the entire application while providing a great developer experience.
