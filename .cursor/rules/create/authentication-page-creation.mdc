# Authentication-Aware Page Creation Guide

Use this when you add a route like `app/secure/page.tsx` or convert an existing page so it only renders for logged-in users.

---

## 1. Decide on rendering strategy

| Need                                           | Recommended approach |
|------------------------------------------------|----------------------|
| Full server protection (SEO, no flash)         | **Server Component** + `redirect()` |
| Mostly client UI, just hide until ready        | **Client Component** with `useAuth` & `useSupabaseReady` |
| Mixed (layout server, interactive client)      | Server wrapper that passes props; inner client component |

---

## 2. Server-component pattern (hard redirect)
```tsx
// app/secure/page.tsx (server component)
import { redirect } from 'next/navigation';
import { getServerSession } from '@/lib/auth';

export default async function SecurePage() {
  const { session, role } = await getServerSession();
  if (!session) redirect('/login');

  // Optional role check
  if (role !== 'admin') redirect('/');

  return (
    <section className="p-8">
      {/* secure content here */}
    </section>
  );
}
```
* `getServerSession()` (see `lib/auth.ts`) pulls the role from `user_data` and returns `{ session, role }`.
* Use **`redirect()`**; avoid rendering a client component that would flash then redirect.

---

## 3. Client-component pattern (soft gate)
```tsx
"use client";
import { useAuth } from '@/components/auth-provider';
import { useSupabaseReady } from '@/hooks/use-supabase-ready';
import { Spinner } from '@/components/ui/spinner';

export default function SecureClientPage() {
  const { user, role, loading: authLoading } = useAuth();
  const supaReady = useSupabaseReady();

  if (authLoading || !supaReady) return <Spinner/>;
  if (!user) return <p>Please <a href="/login">sign in</a>.</p>;
  if (role !== 'admin') return <p>403 – Forbidden</p>;

  return <div className="p-8">protected UI</div>;
}
```
* Use this when the page is heavily interactive and flashes are acceptable.

---

## 4. Pages with server + client split
1. Create `app/reports/layout.tsx` (server) that checks auth & role, passes props (e.g. `initialUser`) to children.
2. Inside layout, render a client component that consumes those props with `useHydration`.

---

## 5. Common tips
* Never call `createClient()` in the server layer – use `createServerClient()` from `lib/supabase.ts`.
* For anonymous-optional pages, render normally but hide privileged controls using `user?.role` checks client-side.
* Always respect `useSupabaseReady()` before firing Supabase queries in client code.
* Redirect unauthenticated users to `/login` or a marketing page to avoid crawl of blank pages.

---

## 6. Checklist before commit
- [ ] Page protects unauthenticated access via redirect or conditional render.
- [ ] Role checks (`admin`, etc.) applied where needed.
- [ ] No duplicate calls to `supabase.auth.getUser()` – rely on context / server util.
- [ ] If client component, waits for `!authLoading && supaReady`.
- [ ] Tests or manual verifications for logged-out, normal user, admin.
description:
globs:
alwaysApply: false
---
