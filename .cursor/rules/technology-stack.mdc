# Technology Stack and Integrations

## ðŸš¨ Critical Technology Guidelines for LLMs

- **MAINTAIN** existing technology versions and configurations
- **FOLLOW** established integration patterns when adding new libraries
- **VERIFY** compatibility before upgrading major dependencies
- **DOCUMENT** new integrations following existing patterns
- **TEST** changes thoroughly across all supported platforms

## Core Technology Stack

### Frontend Framework

#### Next.js 15
**Purpose**: Primary React framework with App Router
**Version**: `15.3.5`
**Key Features**:
- App Router for modern routing architecture
- Server Components for improved performance
- Server Actions for simplified data mutations
- Built-in optimization features (Image, Font, etc.)
- Turbopack for development builds
- TypeScript support out of the box

**Configuration**: `next.config.js`
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
  images: {
    domains: ['EXAMPLE_DOMAIN'],
  },
}

module.exports = nextConfig
```

#### React 19
**Purpose**: Core UI library
**Version**: `18.2.0` (Latest stable in stack)
**Key Features**:
- Concurrent features for better UX
- Suspense for data fetching
- Error boundaries for fault tolerance
- Hook-based architecture
- Server Component compatibility

### TypeScript Integration
**Purpose**: Type-safe development environment
**Version**: `5.2.2`
**Configuration**: `tsconfig.json`

**Key Benefits**:
- Compile-time error detection
- Enhanced IDE support
- Auto-generated database types
- Strict null checks enabled
- Path mapping configured

## Styling and UI Framework

### Tailwind CSS
**Purpose**: Utility-first CSS framework
**Version**: `^3.4.1`
**Configuration**: `tailwind.config.ts`

**Key Features**:
- Design system integration
- Dark mode support
- Custom color schemes
- Responsive design utilities
- Component variants with CVA

**Custom Configuration**:
```typescript
const config: Config = {
  darkMode: "class",
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        // ... additional color definitions
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```

### Radix UI
**Purpose**: Accessible component primitives
**Key Packages**:
- `@radix-ui/react-dialog` - Modal dialogs
- `@radix-ui/react-dropdown-menu` - Dropdown menus
- `@radix-ui/react-popover` - Popovers and tooltips
- `@radix-ui/react-scroll-area` - Custom scrollbars
- `@radix-ui/react-select` - Select dropdowns

**Benefits**:
- WAI-ARIA compliant
- Keyboard navigation support
- Focus management
- Screen reader compatibility

### shadcn/ui Components
**Purpose**: Pre-built accessible components
**Location**: `components/ui/`

**Key Components**:
- `Button` - Interactive buttons with variants
- `Card` - Content containers
- `Dialog` - Modal dialogs
- `Form` - Form handling with validation
- `Input` - Text input fields
- `Table` - Data tables
- `Toast` - Notification system

## Animation and Motion

### Framer Motion
**Purpose**: Animation library for React
**Version**: `^11.13.1`

**Usage Patterns**:
```typescript
import { motion } from 'framer-motion'

// Page transitions
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.6 }}
>
  Content
</motion.div>

// Hover animations
<motion.div
  whileHover={{ scale: 1.05 }}
  whileTap={{ scale: 0.95 }}
>
  Interactive element
</motion.div>
```

**Key Features**:
- Page transitions
- Hover animations
- Loading states
- Hero section animations
- Component reveal effects

## Database and Backend

### Supabase
**Purpose**: Backend-as-a-Service platform
**Key Services**:
- PostgreSQL database
- Authentication service
- Real-time subscriptions
- Edge Functions
- Storage

**Client Configuration**:
```typescript
import { createClient } from '@supabase/ssr'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

### Database Types
**Purpose**: Auto-generated TypeScript types
**Generation**: Via Supabase CLI

**Usage**:
```typescript
import { Database } from '@/lib/database.types'

type UserData = Database['public']['Tables']['user_data']['Row']
type AdminSettings = Database['public']['Tables']['admin_settings']['Row']
```

## Payment Processing

### Stripe
**Purpose**: Payment processing and subscription management
**Version**: `^16.8.0`

**Server Configuration**:
```typescript
import Stripe from 'stripe'

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
})
```

**Key Features**:
- Product management
- Subscription billing
- Webhook handling
- Customer portal
- Payment history

**Integration Points**:
- Admin product creation
- Checkout session creation
- Subscription management
- Webhook processing

## Rich Text Editing

### Tiptap
**Purpose**: Rich text editor framework
**Version**: `^2.6.6`

**Configuration**:
```typescript
import { useEditor } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import Link from '@tiptap/extension-link'

const editor = useEditor({
  extensions: [StarterKit, Link],
  content: value || "",
  onUpdate({ editor }) {
    onChange(editor.getHTML())
  },
})
```

**Features**:
- WYSIWYG editing
- Markdown support
- Link handling
- Extensible architecture
- Collaborative editing ready

## Mobile Development

### Capacitor
**Purpose**: Cross-platform mobile app development
**Version**: `^6.1.2`

**Configuration**: `capacitor.config.ts`
```typescript
import type { CapacitorConfig } from '@capacitor/cli'

const config: CapacitorConfig = {
  appId: 'MOBILE_APP_ID',
  appName: 'MOBILE_APP_NAME',
  webDir: 'out',
  server: {
    androidScheme: 'https'
  }
}

export default config
```

**Native Plugins**:
- Camera access
- Geolocation
- Push notifications
- Biometric authentication
- File system access

## Development Tools

### Testing Framework

#### Vitest
**Purpose**: Unit testing framework
**Version**: `^2.0.5`
**Configuration**: `vitest.config.ts`

**Features**:
- Fast test execution
- TypeScript support
- Mock capabilities
- Coverage reporting

#### Playwright
**Purpose**: End-to-end testing
**Version**: `^1.46.1`
**Configuration**: `playwright.config.ts`

**Features**:
- Cross-browser testing
- Mobile testing
- Visual regression testing
- API testing

### Storybook
**Purpose**: Component development and documentation
**Version**: `^8.2.9`

**Configuration**: `.storybook/main.ts`
**Features**:
- Component isolation
- Interactive documentation
- Visual testing
- Accessibility testing

### Code Quality

#### ESLint
**Purpose**: Code linting and formatting
**Configuration**: `eslint.config.js`

**Key Rules**:
- TypeScript strict rules
- React hooks rules
- Next.js specific rules
- Accessibility rules

#### Prettier
**Purpose**: Code formatting
**Configuration**: `.prettierrc`

**Settings**:
```json
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5"
}
```

## State Management

### React Context
**Purpose**: Application state management
**Key Contexts**:
- `AuthProvider` - Authentication state
- `ThemeProvider` - Theme management
- `AdminSettingsProvider` - Admin configuration

**Pattern**:
```typescript
const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider')
  }
  return context
}
```

### Form Management

#### React Hook Form
**Purpose**: Form handling and validation
**Version**: `^7.53.0`

**Integration with Zod**:
```typescript
const form = useForm<FormData>({
  resolver: zodResolver(formSchema),
  defaultValues: {
    name: '',
    email: '',
  }
})
```

## AI and Development Workflow

### TaskMaster Integration
**Purpose**: AI-powered development workflow management
**Configuration**: `.taskmaster/config.json`

**Features**:
- Task breakdown and management
- AI-powered code generation
- Project planning automation
- Development workflow optimization

**Models Configuration**:
```json
{
  "models": {
    "main": "claude-3-5-sonnet-20241022",
    "research": "perplexity-llama-3.1-sonar-large-128k-online",
    "fallback": "gpt-4o-mini"
  }
}
```

### MCP Integration
**Purpose**: Model Context Protocol for AI tool integration
**Supported Tools**:
- Supabase database operations
- GitHub repository management
- TaskMaster workflow automation

## Data Validation

### Zod
**Purpose**: TypeScript-first schema validation
**Version**: `^3.25.67`

**Usage Patterns**:
```typescript
import { z } from 'zod'

const UserSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  age: z.number().min(18)
})

type User = z.infer<typeof UserSchema>
```

**Integration Points**:
- API route validation
- Form validation with React Hook Form
- Database input validation
- Type generation from schemas

## Drag and Drop

### DND Kit
**Purpose**: Accessible drag and drop functionality
**Version**: `^6.3.1` (core), `^10.0.0` (sortable), `^9.0.0` (modifiers)

**Key Packages**:
- `@dnd-kit/core` - Core drag and drop primitives
- `@dnd-kit/sortable` - Sortable list functionality
- `@dnd-kit/modifiers` - Drag constraints and modifiers
- `@dnd-kit/utilities` - Utility functions

**Usage**: Sortable lists in admin interfaces, component reordering

## Utility Libraries

### Additional Dependencies
**Key Utilities**:
- `clsx` (v2.1.1) - Conditional className utility
- `class-variance-authority` (v0.7.0) - Component variant handling
- `tailwind-merge` (v2.5.2) - Tailwind class merging
- `date-fns` (v3.6.0) - Date manipulation
- `lodash` (v4.17.21) - Utility functions
- `sonner` (v1.5.0) - Toast notifications

## Environment Configuration

### Required Environment Variables

**Core Application**:
```bash
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# Application URL
NEXT_PUBLIC_APP_URL=APP_URL
```

**Stripe Integration (Optional)**:
```bash
NEXT_PUBLIC_STRIPE_KEY=STRIPE_PUBLISHABLE_KEY
NEXT_PUBLIC_STRIPE_SECRET=STRIPE_SECRET_KEY
STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET
```

**Development Tools**:
```bash
# TaskMaster AI Models
ANTHROPIC_API_KEY=your_anthropic_key
PERPLEXITY_API_KEY=your_perplexity_key
OPENAI_API_KEY=your_openai_key
```

## Build and Deployment

### Build System
**Primary**: Next.js built-in build system
**Development**: Turbopack for fast rebuilds
**Production**: Optimized static generation and SSR

### Deployment Platforms
**Recommended**:
- Vercel (primary)
- Netlify (alternative)
- Custom hosting with Docker

### Mobile Deployment
**iOS**: App Store via Capacitor
**Android**: Google Play Store via Capacitor
**PWA**: Progressive Web App capabilities

## Performance Optimization

### Next.js Optimizations
- Image optimization with `next/image`
- Font optimization with `next/font`
- Bundle analysis and code splitting
- Static generation where possible
- Server Components for reduced JavaScript

### Database Optimization
- Connection pooling via Supabase
- Query optimization with proper indexing
- Real-time subscriptions for live data
- Row Level Security for data protection

## Security Features

### Authentication Security
- JWT token handling via Supabase
- Server-side session validation
- Row Level Security policies
- CSRF protection built-in

### Data Protection
- Environment variable security
- Input validation with Zod
- XSS prevention
- CORS configuration

## Integration Patterns

### Adding New Technologies
1. **Evaluate compatibility** with existing stack
2. **Check TypeScript support** and type definitions
3. **Test integration** in development environment
4. **Update documentation** with usage patterns
5. **Add appropriate tests** for new functionality

### Version Management
- Use exact versions for critical dependencies
- Regular security updates for all packages
- Compatibility testing before major upgrades
- Rollback plan for failed upgrades

This technology stack provides a comprehensive foundation for modern web application development with enterprise-grade features, security, and performance. When adding new technologies, always consider their impact on the existing stack and follow established integration patterns.
